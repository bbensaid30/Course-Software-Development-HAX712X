[
  {
    "objectID": "Courses/OPP/Docs.html",
    "href": "Courses/OPP/Docs.html",
    "title": "Markup languages / Documentation",
    "section": "",
    "text": "Before starting a description of Sphinx, we first start by introducing, markdown, quarto and reStructuredText files.\nDisclaimer: this course is mainly adapted from the Quarto and Sphinx documentation.",
    "crumbs": [
      "OOP",
      "Markup languages / Documentation"
    ]
  },
  {
    "objectID": "Courses/OPP/Docs.html#markdown",
    "href": "Courses/OPP/Docs.html#markdown",
    "title": "Markup languages / Documentation",
    "section": "Markdown",
    "text": "Markdown\nMarkdown is a lightweight markup language developed by John Gruber and Aaron Swartz1 .\nHence Markdown is an easy-to-read markup language, popular for simple text formatting, creating documentation for software projects, but also for writing nice emails (for Thunderbird or any browser, etc.).\nThe extension for a Mardkown file is .md. To render such a file in VSCode or Codium, and possibly export a .pdf or .html file, you need to install a package for that (for instance the Markdown All in One could be installed with Ctrl+Shift+p, and looking for the right name in Extensions: Install Extensions).\n\n\nLeft: Markdown code\n\n# Title level 1\n\n## Title level 2\n\n\n# Another title level 1\n\n## Another title level 2\n\n\nThis would be a paragraph. You can use **bold font** but also *italic* and or  ~~strikethrough~~.\n\nOther elements are listed below :\n\n- item 1\n- item 2\n  - sub-item 1\n  - sub-item 2\n\n\n\nRight: rendered\n\nTitle level 1\n\nTitle level 2\n\n\n\nTitle level 1\n\nTitle level 2\nThis would be a paragraph. You can use bold font but also italic or strikethrough.\nOther elements are listed here :\n\nitem 1\nitem 2\n\nsub-item 1\nsub-item 2\n\n\n\n\n\n\nA full description can be found here: https://www.markdownguide.org/basic-syntax/; a nice cheatsheet is also available here: https://www.markdownguide.org/cheat-sheet/.",
    "crumbs": [
      "OOP",
      "Markup languages / Documentation"
    ]
  },
  {
    "objectID": "Courses/OPP/Docs.html#title-level-2",
    "href": "Courses/OPP/Docs.html#title-level-2",
    "title": "Markup languages / Documentation",
    "section": "Title level 2",
    "text": "Title level 2",
    "crumbs": [
      "OOP",
      "Markup languages / Documentation"
    ]
  },
  {
    "objectID": "Courses/OPP/Docs.html#title-level-2-1",
    "href": "Courses/OPP/Docs.html#title-level-2-1",
    "title": "Markup languages / Documentation",
    "section": "Title level 2",
    "text": "Title level 2\nThis would be a paragraph. You can use bold font but also italic or strikethrough.\nOther elements are listed here :\n\nitem 1\nitem 2\n\nsub-item 1\nsub-item 2",
    "crumbs": [
      "OOP",
      "Markup languages / Documentation"
    ]
  },
  {
    "objectID": "Courses/OPP/Docs.html#quarto",
    "href": "Courses/OPP/Docs.html#quarto",
    "title": "Markup languages / Documentation",
    "section": "Quarto",
    "text": "Quarto\nQuarto is an open-source scientific and technical publishing system. For instance, we have used it for creating the website you are reading right now. We describe here its main usage. Quarto allows rendering markdown elements and creating a website easily, that can run some code (R, Python, etc.) and display the results (tables, figures, etc.), possibly in an interactive way. The extension is .qmd for Quarto files.\nAs an example, you can see below how to create a code snippet in a Quarto, and how it is rendered, along with the code output.\n\n\nLeft: Quarto code\n```{python}\nimport numpy as np\nprint(np.sum(np.ones(12)))\n```\n\n\n\nRight: Rendered\n\nimport numpy as np\nprint(np.sum(np.ones(12)))\n\n12.0\n\n\n\n\nDocumentation for using python in Quarto: https://quarto.org/docs/computations/python.html",
    "crumbs": [
      "OOP",
      "Markup languages / Documentation"
    ]
  },
  {
    "objectID": "Courses/OPP/Docs.html#restructuredtext",
    "href": "Courses/OPP/Docs.html#restructuredtext",
    "title": "Markup languages / Documentation",
    "section": "reStructuredText",
    "text": "reStructuredText\nreStructuredText (.RST, .ReST, or .reST) is a file format for textual data used primarily in the Python programming language community for technical documentation and is similar to the Markdown format.\nIt is part of the Docutils project of the Python Doc-SIG (Documentation Special Interest Group), aimed at creating a set of tools for Python similar to Javadoc for Java or Plain Old Documentation (pod) for Perl or vignette for R.\nDocutils can extract comments and information from Python programs, and format them into various forms of program documentation.\nIn this sense, reStructuredText is a lightweight markup language designed to be both:\n\nProcessable by documentation-processing software such as Docutils.\nEasily readable by human programmers who are reading and writing Python source code.\n\nReferences:\n\nWikipedia on ReStructuredText\nMarkup languages\nDocumentation generators\n\n\nSyntax\nA ReST file is a plain text file with a .rst extension. Like Markdown, it allows you to easily write formatted text.\n\nHeaders\nSection Header\n==============\n\nSubsection Header\n-----------------\n\n\nLists\n- A bullet list item\n- Second item\n\n  - A sub-item (indentation matters!)\n\n- Spacing between items creates separate lists\n\n- Third item\n\n1) An enumerated list item\n\n2) Second item\n\n   a) Sub-item that goes on at length and thus needs\n      to be wrapped. Note the indentation that must\n      match the beginning of the text, not the\n      enumerator.\n\n      i) List items can even include\n\n         paragraph breaks.\n\n3) Third item\n\n#) Another enumerated list item\n\n#) Second item\n\n\nImages\n\n.. image:: /path/to/image.jpg\n   :height: 100\n   :width: 200\n   :scale: 50\n   :align: center\n   :alt: ordinateur\n\n   Caption text rendered below the image...\n\n\nNamed links and anonymous links\nA sentence with links to Wikipedia and the Linux kernel archive.\n.. Wikipedia: https://www.wikipedia.org/\n.. Linux kernel archive: https://www.kernel.org/\nAnother sentence with an anonymous link to the Python website.\n__ https://www.python.org/\n\n\n\n\n\n\nNote\n\n\n\nNamed links and anonymous links are enclosed in grave accents (`), and not in apostrophes (’).\n\n\n\n\n\n\n\n\nNote\n\n\n\nIt is possible to create references to labels linked to an image, a section, in the .rst file, etc.\n\n\n\n\nLiteral blocks\n::\n  some literal text\n\nThis may also be used inline at the end of a paragraph, like so::\nSome more literal text:\n.. code:: python\n\n   print(\"A literal block directive explicitly marked as python code\")",
    "crumbs": [
      "OOP",
      "Markup languages / Documentation"
    ]
  },
  {
    "objectID": "Courses/OPP/Docs.html#sphinx-a-documentation-generator",
    "href": "Courses/OPP/Docs.html#sphinx-a-documentation-generator",
    "title": "Markup languages / Documentation",
    "section": "Sphinx: a documentation generator",
    "text": "Sphinx: a documentation generator\nSphinx is an extension of reStructuredText.\nThe documentation of a python package is usually located in a docs or doc folder located at the root of a project. For instance, in the biketrauma module we have considered in the courses Creating a python module, the structure could be as follows:\npackaging_tutorial/\n    ├── biketrauma/\n    │     ├── __init__.py\n    │     ├── io/\n    │     ├── preprocess/\n    │     └── vis/\n    │     └── data/\n    ├── doc/\n    ├── setup.py\n    ├── script.py\n    └── .gitignore\nIn the Sphinx terminology, this doc folder is called the source directory. It contains:\n\nA configuration file conf.py with all the information needed to read the sources and build the doc. By building, it is meant the process of generating the doc (usually in html, pdf, etc.) from the ReST files.\nA directory structure containing .md or .rst files with the doc.\n\nTo help you, Sphinx comes with a script called sphinx-quickstart that sets up a source directory and creates a default conf.py with the most useful configuration values from a few questions it asks you. To use this, run:\n$ sphinx-quickstart\nAnswer each question asked. Be sure to say yes to the autodoc extension, as we will use this later. There is also an automatic API documentation (API: Application Programming Interface) generator called sphinx-apidoc; see sphinx-apidoc for details.\n\n\n\n\n\n\nEXERCISE: Setting up your documentation\n\n\n\nSet up the documentation for the biketrauma Python module.\n\nInstall the sphinx package with pip\nCreate a doc folder and cd into it\nLaunch sphinx-quickstart --sep.",
    "crumbs": [
      "OOP",
      "Markup languages / Documentation"
    ]
  },
  {
    "objectID": "Courses/OPP/Docs.html#defining-documentation-structure",
    "href": "Courses/OPP/Docs.html#defining-documentation-structure",
    "title": "Markup languages / Documentation",
    "section": "Defining documentation structure",
    "text": "Defining documentation structure\nLet us assume you have run sphinx-quickstart. It has created a source directory with conf.py and a master document, index.rst (if you accepted the default parameters).\nThe main function of the master document is to serve as a welcome page and to contain the root of the “table of contents tree” (or toctree). This is one of the main things that Sphinx adds to reStructuredText, a way to connect multiple files to a single hierarchy of documents.\nThe toctree directive initially is empty and looks like so:\n.. toctree::\n   :maxdepth: 2\nYou add documents listing them in the content of the directive:\n.. toctree::\n   :maxdepth: 2\n\n   usage/installation\n   usage/quickstart\n   ...\nThis is exactly how the toctree for this documentation looks. The documents to include are given as document names, which in short means that you leave off the file name extension and use forward slashes (/) as directory separators.\n\n\n\n\n\n\nEXERCISE: installing a documentation\n\n\n\n\nUpdate the index.rst: by adding an image located here just below the title of the page\nInstall the read_the_doc theme following details given here. Additional themes are available on sphinx-doc themes.\nCreate the corresponding directory and files to add:\n\nAn Installation section with a few sentences and code snippets that explain how to install biketrauma\nA Documentation section with subsections io and visu each one containing a title and a few lines of text.",
    "crumbs": [
      "OOP",
      "Markup languages / Documentation"
    ]
  },
  {
    "objectID": "Courses/OPP/Docs.html#building-the-doc",
    "href": "Courses/OPP/Docs.html#building-the-doc",
    "title": "Markup languages / Documentation",
    "section": "Building the doc",
    "text": "Building the doc\nDuring the configuration of Sphinx, a text file called MakeFile was created: In software development, Make is a build automation tool that automatically builds executable programs and libraries from source code by reading files called Makefiles which specify how to derive the target program.\nReferences:\n\nWikipedia on Make Software\n\n$ make html\nThen to access the web pages created:\n$ firefox _build/html/index.html\n\n\n\n\n\n\nNote\n\n\n\nThere is also a sphinx-build tool that can help you to build without make.\n\n\n\n\n\n\n\n\nEXERCISE: Makefiles\n\n\n\n\nList all the target defined in the Makefiles.\nBuild your doc and visualize it with a web navigator.",
    "crumbs": [
      "OOP",
      "Markup languages / Documentation"
    ]
  },
  {
    "objectID": "Courses/OPP/Docs.html#api-doc-autodoc",
    "href": "Courses/OPP/Docs.html#api-doc-autodoc",
    "title": "Markup languages / Documentation",
    "section": "API doc (autodoc)",
    "text": "API doc (autodoc)\nWhen documenting Python code, it is common to put a lot of documentation in the source files, in documentation strings. Sphinx supports the inclusion of docstrings from your modules with an extension (an extension is a Python module that provides additional features for Sphinx projects) called autodoc.\nIn order to use autodoc, you need to activate it in conf.py by putting the string 'sphinx.ext.autodoc' into the list assigned to the extensions config value. Then, you have a few additional directives at your disposal.\nFor example, to document the function io.open(), reading its signature and docstring from the source file, you’d write this:\n.. autofunction:: io.open\nYou can also document whole classes or even modules automatically, using member options for the auto directives, like:\n.. automodule:: io\n   :members:\nautodoc needs to import your modules to extract the docstrings. Therefore, you must add the appropriate path to sys.path in your conf.py.\n\n\n\n\n\n\nEXERCISE: docstring\n\n\n\n\nWrite a docstring for the class biketrauma.io.Load_db and the function plot_location.\nIntegrate this documentation in a section called API in the Sphinx toctree.",
    "crumbs": [
      "OOP",
      "Markup languages / Documentation"
    ]
  },
  {
    "objectID": "Courses/OPP/Docs.html#sphinx-gallery",
    "href": "Courses/OPP/Docs.html#sphinx-gallery",
    "title": "Markup languages / Documentation",
    "section": "Sphinx-Gallery",
    "text": "Sphinx-Gallery\nSphinx-Gallery is an extension able to create galleries of examples in the html documentation directly from the script files of your project.\nReferences: Sphinx Gallery\n\nConfiguration\nConfiguration and customization of sphinx-gallery are done primarily with a dictionary specified in your conf.py file. A typical sample is:\nfrom sphinx_gallery.sorting import FileNameSortKey\nsphinx_gallery_conf = {\n     # path to your examples scripts\n    'examples_dirs': ['../script',],\n     # path where to save gallery-generated examples\n    'gallery_dirs': ['_auto_scripts'],\n    # Order of the Gallery\n    'within_subsection_order': FileNameSortKey,\n}\nA list of the possible keys can be found on Sphinx Galleries.\n\n\n\n\n\n\nEXERCISE: Sphinx gallery\n\n\n\n\nInstall the sphinx-gallery extension with pip.\nUpdate the conf.py of the biketrauma package with the dictionary containing the configuration of the sphinx-gallery.\n\n\n\n\n\nStructure your example files\nSphinx-Gallery parses the folder listed in the key examples_dirs. It expects each Python file to have two things:\n\nA docstring, written in rST, that defines the header for the example. It must begin by defining a .rST title. The title may contain any punctuation mark but cannot start with the same punctuation mark repeated more than 3 times. For example:\n   \"\"\"\n   \"This\" is my example-script\n   ===========================\n\n   This example doesn't do much, it just makes a simple plot\n   \"\"\"\npython code. This can be any valid python code that you wish. Any matplotlib images that are generated will be saved to disk, and the ‘.rST’ generated will display these images with the built examples. By default, only images generated by matplotlib, or packages based on matplotlib (e.g., seaborn or yellowbrick) are saved and displayed. However, you can change this to include other packages, see for instance Image scrapers.\n\nWarning: With default options, Sphinx-Gallery only executes the script files with a filename starting with plot_.\nWarning: Sphinx-Gallery expects to find a README.txt (or README.rst) file in every folder containing examples.\n\n\nInclude examples in your toc-tree\nFor instance, you can add those lines in the index.rst:\n.. toctree::\n   :maxdepth: 2\n   :caption: Previsions:\n\n   _auto_scripts/index\nto add a section containing all the examples.\n\n\n\n\n\n\nEXERCISE: auto-build\n\n\n\n\nTransform the script.py examples into an auto-build example.",
    "crumbs": [
      "OOP",
      "Markup languages / Documentation"
    ]
  },
  {
    "objectID": "Courses/OPP/Docs.html#footnotes",
    "href": "Courses/OPP/Docs.html#footnotes",
    "title": "Markup languages / Documentation",
    "section": "Footnotes",
    "text": "Footnotes\n\n\nAaron Swartz: hacktivist (1986-2013) who also helped develop Creative Commons licenses, RSS, Reddit, etc. For more on his epic life, see Brian Knappenberger’ documentary The Internet’s Own Boy: The Story of Aaron Swartz (2014) ↩︎",
    "crumbs": [
      "OOP",
      "Markup languages / Documentation"
    ]
  },
  {
    "objectID": "Courses/OPP/modules.html",
    "href": "Courses/OPP/modules.html",
    "title": "Creating a Python module",
    "section": "",
    "text": "You already know it: this is a set of python functions and statements, and this is what you import at the beginning of your python functions.\n\n\nIndeed, a module can simply be a single file:\n\nimport fibo\n\nThis does not enter the names of the functions defined in fibo directly in the current symbol table though; it only enters the module name fibo there. Using the module name you can access the functions:\n\nfibo.fib_print(1000)\n\n0 1 1 2 3 5 8 13 21 34 55 89 144 233 377 610 987 \n\n\n\nfibo.fib_list(100)\n\n[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89]\n\n\nWhen importing a module, several methods are (automatically) defined. Their names are usually prefixed and suffixed by the symbol __, e.g.,\n\nfibo.__name__\n\n'fibo'\n\n\n\nfibo.__file__\n\n'/home/runner/work/Course-Software-Development-HAX712X/Course-Software-Development-HAX712X/Courses/OPP/fibo.py'\n\n\n\n\n\nYou can also import a full directory (containing many python files stored in a sub-folder). python looks for a folder located in sys.path list. You have already imported the numpy module, for numerical analysis with python:\n\nimport numpy as np\nprint(np.array([0, 1, 2, 3]).reshape(2, 2))\nprint(np.array([0, 1, 2, 3]).mean())\n\n[[0 1]\n [2 3]]\n1.5\n\n\nIn fact, you have imported the following folder:\n\nnp.__path__\n\n['/opt/hostedtoolcache/Python/3.10.18/x64/lib/python3.10/site-packages/numpy']\n\n\nDepending on your installation you might obtain ['/usr/lib/python3.9/site-packages/numpy'] or ['/home/username/anaconda3/lib/python3.7/site-packages/numpy'] if you installed with Anaconda.\nMore precisely you will get either\n&gt;&gt;&gt; np.__file__\n'/usr/lib/python3.9/site-packages/numpy/__init__.py'\nor\n&gt;&gt;&gt; np.__file__\n'/home/username/anaconda3/lib/python3.7/site-packages/numpy/__init__.py'\nAny (sub-)directory of your python module should contain an __init__.py file!\n\n\n\n\n\n\nUseful tips\n\n\n\n\nThe __init__.py file can contain a list of functions to be loaded when the module is imported. It allows to expose functions to users in a concise way.\nYou can also import modules with relative paths, using ., .., ..., etc.\n\n\n\nReference: Absolute vs Relative Imports in Python by Mbithe Nzomo.\n\n\n\nThe built-in function dir() is used to find out which names a module defines. It returns a sorted list of strings:\n\nimport fibo, numpy\ndir(fibo)\n\n['__builtins__',\n '__cached__',\n '__doc__',\n '__file__',\n '__loader__',\n '__name__',\n '__package__',\n '__spec__',\n 'fib_list',\n 'fib_print']\n\n\n\ndir(numpy)\n\n\n\n\n['ALLOW_THREADS',\n 'AxisError',\n 'BUFSIZE',\n 'CLIP',\n 'ComplexWarning',\n 'DataSource',\n 'ERR_CALL',\n 'ERR_DEFAULT',\n 'ERR_IGNORE',\n 'ERR_LOG',\n 'ERR_PRINT',\n 'ERR_RAISE',\n 'ERR_WARN',\n 'FLOATING_POINT_SUPPORT',\n 'FPE_DIVIDEBYZERO',\n 'FPE_INVALID',\n 'FPE_OVERFLOW',\n 'FPE_UNDERFLOW',\n 'False_',\n 'Inf',\n 'Infinity',\n 'MAXDIMS',\n 'MAY_SHARE_BOUNDS',\n 'MAY_SHARE_EXACT',\n 'ModuleDeprecationWarning',\n 'NAN',\n 'NINF',\n 'NZERO',\n 'NaN',\n 'PINF',\n 'PZERO',\n 'RAISE',\n 'RankWarning',\n 'SHIFT_DIVIDEBYZERO',\n 'SHIFT_INVALID',\n 'SHIFT_OVERFLOW',\n 'SHIFT_UNDERFLOW',\n 'ScalarType',\n 'Tester',\n 'TooHardError',\n 'True_',\n 'UFUNC_BUFSIZE_DEFAULT',\n 'UFUNC_PYVALS_NAME',\n 'VisibleDeprecationWarning',\n 'WRAP',\n '_CopyMode',\n '_NoValue',\n '_UFUNC_API',\n '__NUMPY_SETUP__',\n '__all__',\n '__builtins__',\n '__cached__',\n '__config__',\n '__deprecated_attrs__',\n '__dir__',\n '__doc__',\n '__expired_functions__',\n '__file__',\n '__getattr__',\n '__git_version__',\n '__loader__',\n '__name__',\n '__package__',\n '__path__',\n '__spec__',\n '__version__',\n '_add_newdoc_ufunc',\n '_distributor_init',\n '_financial_names',\n '_globals',\n '_mat',\n '_pyinstaller_hooks_dir',\n '_pytesttester',\n '_version',\n 'abs',\n 'absolute',\n 'add',\n 'add_docstring',\n 'add_newdoc',\n 'add_newdoc_ufunc',\n 'all',\n 'allclose',\n 'alltrue',\n 'amax',\n 'amin',\n 'angle',\n 'any',\n 'append',\n 'apply_along_axis',\n 'apply_over_axes',\n 'arange',\n 'arccos',\n 'arccosh',\n 'arcsin',\n 'arcsinh',\n 'arctan',\n 'arctan2',\n 'arctanh',\n 'argmax',\n 'argmin',\n 'argpartition',\n 'argsort',\n 'argwhere',\n 'around',\n 'array',\n 'array2string',\n 'array_equal',\n 'array_equiv',\n 'array_repr',\n 'array_split',\n 'array_str',\n 'asanyarray',\n 'asarray',\n 'asarray_chkfinite',\n 'ascontiguousarray',\n 'asfarray',\n 'asfortranarray',\n 'asmatrix',\n 'atleast_1d',\n 'atleast_2d',\n 'atleast_3d',\n 'average',\n 'bartlett',\n 'base_repr',\n 'binary_repr',\n 'bincount',\n 'bitwise_and',\n 'bitwise_not',\n 'bitwise_or',\n 'bitwise_xor',\n 'blackman',\n 'block',\n 'bmat',\n 'bool8',\n 'bool_',\n 'broadcast',\n 'broadcast_arrays',\n 'broadcast_shapes',\n 'broadcast_to',\n 'busday_count',\n 'busday_offset',\n 'busdaycalendar',\n 'byte',\n 'byte_bounds',\n 'bytes0',\n 'bytes_',\n 'c_',\n 'can_cast',\n 'cast',\n 'cbrt',\n 'cdouble',\n 'ceil',\n 'cfloat',\n 'char',\n 'character',\n 'chararray',\n 'choose',\n 'clip',\n 'clongdouble',\n 'clongfloat',\n 'column_stack',\n 'common_type',\n 'compare_chararrays',\n 'compat',\n 'complex128',\n 'complex256',\n 'complex64',\n 'complex_',\n 'complexfloating',\n 'compress',\n 'concatenate',\n 'conj',\n 'conjugate',\n 'convolve',\n 'copy',\n 'copysign',\n 'copyto',\n 'core',\n 'corrcoef',\n 'correlate',\n 'cos',\n 'cosh',\n 'count_nonzero',\n 'cov',\n 'cross',\n 'csingle',\n 'ctypeslib',\n 'cumprod',\n 'cumproduct',\n 'cumsum',\n 'datetime64',\n 'datetime_as_string',\n 'datetime_data',\n 'deg2rad',\n 'degrees',\n 'delete',\n 'deprecate',\n 'deprecate_with_doc',\n 'diag',\n 'diag_indices',\n 'diag_indices_from',\n 'diagflat',\n 'diagonal',\n 'diff',\n 'digitize',\n 'disp',\n 'divide',\n 'divmod',\n 'dot',\n 'double',\n 'dsplit',\n 'dstack',\n 'dtype',\n 'e',\n 'ediff1d',\n 'einsum',\n 'einsum_path',\n 'emath',\n 'empty',\n 'empty_like',\n 'equal',\n 'errstate',\n 'euler_gamma',\n 'exp',\n 'exp2',\n 'expand_dims',\n 'expm1',\n 'extract',\n 'eye',\n 'fabs',\n 'fastCopyAndTranspose',\n 'fft',\n 'fill_diagonal',\n 'find_common_type',\n 'finfo',\n 'fix',\n 'flatiter',\n 'flatnonzero',\n 'flexible',\n 'flip',\n 'fliplr',\n 'flipud',\n 'float128',\n 'float16',\n 'float32',\n 'float64',\n 'float_',\n 'float_power',\n 'floating',\n 'floor',\n 'floor_divide',\n 'fmax',\n 'fmin',\n 'fmod',\n 'format_float_positional',\n 'format_float_scientific',\n 'format_parser',\n 'frexp',\n 'from_dlpack',\n 'frombuffer',\n 'fromfile',\n 'fromfunction',\n 'fromiter',\n 'frompyfunc',\n 'fromregex',\n 'fromstring',\n 'full',\n 'full_like',\n 'gcd',\n 'generic',\n 'genfromtxt',\n 'geomspace',\n 'get_array_wrap',\n 'get_include',\n 'get_printoptions',\n 'getbufsize',\n 'geterr',\n 'geterrcall',\n 'geterrobj',\n 'gradient',\n 'greater',\n 'greater_equal',\n 'half',\n 'hamming',\n 'hanning',\n 'heaviside',\n 'histogram',\n 'histogram2d',\n 'histogram_bin_edges',\n 'histogramdd',\n 'hsplit',\n 'hstack',\n 'hypot',\n 'i0',\n 'identity',\n 'iinfo',\n 'imag',\n 'in1d',\n 'index_exp',\n 'indices',\n 'inexact',\n 'inf',\n 'info',\n 'infty',\n 'inner',\n 'insert',\n 'int0',\n 'int16',\n 'int32',\n 'int64',\n 'int8',\n 'int_',\n 'intc',\n 'integer',\n 'interp',\n 'intersect1d',\n 'intp',\n 'invert',\n 'is_busday',\n 'isclose',\n 'iscomplex',\n 'iscomplexobj',\n 'isfinite',\n 'isfortran',\n 'isin',\n 'isinf',\n 'isnan',\n 'isnat',\n 'isneginf',\n 'isposinf',\n 'isreal',\n 'isrealobj',\n 'isscalar',\n 'issctype',\n 'issubclass_',\n 'issubdtype',\n 'issubsctype',\n 'iterable',\n 'ix_',\n 'kaiser',\n 'kernel_version',\n 'kron',\n 'lcm',\n 'ldexp',\n 'left_shift',\n 'less',\n 'less_equal',\n 'lexsort',\n 'lib',\n 'linalg',\n 'linspace',\n 'little_endian',\n 'load',\n 'loadtxt',\n 'log',\n 'log10',\n 'log1p',\n 'log2',\n 'logaddexp',\n 'logaddexp2',\n 'logical_and',\n 'logical_not',\n 'logical_or',\n 'logical_xor',\n 'logspace',\n 'longcomplex',\n 'longdouble',\n 'longfloat',\n 'longlong',\n 'lookfor',\n 'ma',\n 'mask_indices',\n 'mat',\n 'math',\n 'matmul',\n 'matrix',\n 'matrixlib',\n 'max',\n 'maximum',\n 'maximum_sctype',\n 'may_share_memory',\n 'mean',\n 'median',\n 'memmap',\n 'meshgrid',\n 'mgrid',\n 'min',\n 'min_scalar_type',\n 'minimum',\n 'mintypecode',\n 'mod',\n 'modf',\n 'moveaxis',\n 'msort',\n 'multiply',\n 'nan',\n 'nan_to_num',\n 'nanargmax',\n 'nanargmin',\n 'nancumprod',\n 'nancumsum',\n 'nanmax',\n 'nanmean',\n 'nanmedian',\n 'nanmin',\n 'nanpercentile',\n 'nanprod',\n 'nanquantile',\n 'nanstd',\n 'nansum',\n 'nanvar',\n 'nbytes',\n 'ndarray',\n 'ndenumerate',\n 'ndim',\n 'ndindex',\n 'nditer',\n 'negative',\n 'nested_iters',\n 'newaxis',\n 'nextafter',\n 'nonzero',\n 'not_equal',\n 'numarray',\n 'number',\n 'obj2sctype',\n 'object0',\n 'object_',\n 'ogrid',\n 'oldnumeric',\n 'ones',\n 'ones_like',\n 'os',\n 'outer',\n 'packbits',\n 'pad',\n 'partition',\n 'percentile',\n 'pi',\n 'piecewise',\n 'place',\n 'poly',\n 'poly1d',\n 'polyadd',\n 'polyder',\n 'polydiv',\n 'polyfit',\n 'polyint',\n 'polymul',\n 'polynomial',\n 'polysub',\n 'polyval',\n 'positive',\n 'power',\n 'printoptions',\n 'prod',\n 'product',\n 'promote_types',\n 'ptp',\n 'put',\n 'put_along_axis',\n 'putmask',\n 'quantile',\n 'r_',\n 'rad2deg',\n 'radians',\n 'random',\n 'ravel',\n 'ravel_multi_index',\n 'real',\n 'real_if_close',\n 'rec',\n 'recarray',\n 'recfromcsv',\n 'recfromtxt',\n 'reciprocal',\n 'record',\n 'remainder',\n 'repeat',\n 'require',\n 'reshape',\n 'resize',\n 'result_type',\n 'right_shift',\n 'rint',\n 'roll',\n 'rollaxis',\n 'roots',\n 'rot90',\n 'round',\n 'round_',\n 'row_stack',\n 's_',\n 'safe_eval',\n 'save',\n 'savetxt',\n 'savez',\n 'savez_compressed',\n 'sctype2char',\n 'sctypeDict',\n 'sctypes',\n 'searchsorted',\n 'select',\n 'set_numeric_ops',\n 'set_printoptions',\n 'set_string_function',\n 'setbufsize',\n 'setdiff1d',\n 'seterr',\n 'seterrcall',\n 'seterrobj',\n 'setxor1d',\n 'shape',\n 'shares_memory',\n 'short',\n 'show_config',\n 'sign',\n 'signbit',\n 'signedinteger',\n 'sin',\n 'sinc',\n 'single',\n 'singlecomplex',\n 'sinh',\n 'size',\n 'sometrue',\n 'sort',\n 'sort_complex',\n 'source',\n 'spacing',\n 'split',\n 'sqrt',\n 'square',\n 'squeeze',\n 'stack',\n 'std',\n 'str0',\n 'str_',\n 'string_',\n 'subtract',\n 'sum',\n 'swapaxes',\n 'sys',\n 'take',\n 'take_along_axis',\n 'tan',\n 'tanh',\n 'tensordot',\n 'test',\n 'testing',\n 'tile',\n 'timedelta64',\n 'trace',\n 'tracemalloc_domain',\n 'transpose',\n 'trapz',\n 'tri',\n 'tril',\n 'tril_indices',\n 'tril_indices_from',\n 'trim_zeros',\n 'triu',\n 'triu_indices',\n 'triu_indices_from',\n 'true_divide',\n 'trunc',\n 'typecodes',\n 'typename',\n 'ubyte',\n 'ufunc',\n 'uint',\n 'uint0',\n 'uint16',\n 'uint32',\n 'uint64',\n 'uint8',\n 'uintc',\n 'uintp',\n 'ulonglong',\n 'unicode_',\n 'union1d',\n 'unique',\n 'unpackbits',\n 'unravel_index',\n 'unsignedinteger',\n 'unwrap',\n 'use_hugepage',\n 'ushort',\n 'vander',\n 'var',\n 'vdot',\n 'vectorize',\n 'version',\n 'void',\n 'void0',\n 'vsplit',\n 'vstack',\n 'warnings',\n 'where',\n 'who',\n 'zeros',\n 'zeros_like']\n\n\n\n\n To list every element in your symbol table simply call dir().\nReference: Python doc of the dir function\n\n\n\nA namespace is a set of names (functions, variables, etc.). Different namespaces can co-exist at a given time but are completely isolated. In this way, you can control which function you are using.\nA namespace containing all the built-in names is created when we start the python interpreter and exists as long we don’t exit.\n\ncos(3)\n\n\n---------------------------------------------------------------------------\nNameError                                 Traceback (most recent call last)\nCell In[11], line 1\n----&gt; 1 cos(3)\n\nNameError: name 'cos' is not defined\n\n\n\nYou need to import a package for mathematical functions:\n\nimport math, numpy as np\nprint(math.cos(3), np.cos(3))\n\n-0.9899924966004454 -0.9899924966004454\n\n\nReference: Python Namespace and Scope tutorial\n\n\n\nWhen a module named spam is imported, the interpreter first searches for a built-in module with that name. If not found, it then searches for a file named spam.py in a list of directories given by the variable sys.path. The variable sys.path is initialized from these locations:\n\nThe directory containing the input script (or the current directory when no file is specified).\nThe environment variable PYTHONPATH (a list of directory names, with the same syntax as the shell variable PATH).\n\nReference: Python documentation, The Module Search Path\n\n\n\nFind the loader for a module, optionally within the specified path.\n\nimport importlib\nspam_spec = importlib.util.find_spec(\"spam\")\nfound = spam_spec is not None\nprint(found)\n\nFalse\n\n\nNow,\n\nimport numpy\nnumpy_spec = importlib.util.find_spec(\"numpy\")\nprint(numpy_spec)\n\nModuleSpec(name='numpy', loader=&lt;_frozen_importlib_external.SourceFileLoader object at 0x7f125cc13b20&gt;, origin='/opt/hostedtoolcache/Python/3.10.18/x64/lib/python3.10/site-packages/numpy/__init__.py', submodule_search_locations=['/opt/hostedtoolcache/Python/3.10.18/x64/lib/python3.10/site-packages/numpy'])\n\n\nshould return more information and where the loader is.\nReferences:\n\nPython doc on find_loader\nHow to check if a Python module exists without importing it on Stackoverflow\n\n\n\n\nA module can contain executable statements as well as function definitions. These statements are intended to initialize the module. They are executed only the first time the module name is encountered in an import statement.\nTo force a module to be reloaded, you can use importlib.reload().\nRemark: when using ipython (interactive python, an ancestor of the jupyter notebook), one can use the “magic” command %autoreload 2\nReferences: - Python doc on reload - IPython autoreload\n\n\n\nTo speed up loading modules, python caches the compiled version of each module in the __pycache__ directory under the name module.version.pyc, where the version encodes the format of the compiled file; it generally contains the python version number.\nFor example, in CPython release 3.3 the compiled version of spam.py would be cached as __pycache__/spam.cpython-33.pyc. This naming convention allows compiled modules from different releases and different versions of python to coexist.\n\n\n\n\n\n\nUseful git tip\n\n\n\nYou should add __pycache__ entry in your .gitignore file to avoid adding a compiled python file to your project.",
    "crumbs": [
      "OOP",
      "Creating a Python module"
    ]
  },
  {
    "objectID": "Courses/OPP/modules.html#what-is-a-python-module",
    "href": "Courses/OPP/modules.html#what-is-a-python-module",
    "title": "Creating a Python module",
    "section": "",
    "text": "You already know it: this is a set of python functions and statements, and this is what you import at the beginning of your python functions.\n\n\nIndeed, a module can simply be a single file:\n\nimport fibo\n\nThis does not enter the names of the functions defined in fibo directly in the current symbol table though; it only enters the module name fibo there. Using the module name you can access the functions:\n\nfibo.fib_print(1000)\n\n0 1 1 2 3 5 8 13 21 34 55 89 144 233 377 610 987 \n\n\n\nfibo.fib_list(100)\n\n[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89]\n\n\nWhen importing a module, several methods are (automatically) defined. Their names are usually prefixed and suffixed by the symbol __, e.g.,\n\nfibo.__name__\n\n'fibo'\n\n\n\nfibo.__file__\n\n'/home/runner/work/Course-Software-Development-HAX712X/Course-Software-Development-HAX712X/Courses/OPP/fibo.py'\n\n\n\n\n\nYou can also import a full directory (containing many python files stored in a sub-folder). python looks for a folder located in sys.path list. You have already imported the numpy module, for numerical analysis with python:\n\nimport numpy as np\nprint(np.array([0, 1, 2, 3]).reshape(2, 2))\nprint(np.array([0, 1, 2, 3]).mean())\n\n[[0 1]\n [2 3]]\n1.5\n\n\nIn fact, you have imported the following folder:\n\nnp.__path__\n\n['/opt/hostedtoolcache/Python/3.10.18/x64/lib/python3.10/site-packages/numpy']\n\n\nDepending on your installation you might obtain ['/usr/lib/python3.9/site-packages/numpy'] or ['/home/username/anaconda3/lib/python3.7/site-packages/numpy'] if you installed with Anaconda.\nMore precisely you will get either\n&gt;&gt;&gt; np.__file__\n'/usr/lib/python3.9/site-packages/numpy/__init__.py'\nor\n&gt;&gt;&gt; np.__file__\n'/home/username/anaconda3/lib/python3.7/site-packages/numpy/__init__.py'\nAny (sub-)directory of your python module should contain an __init__.py file!\n\n\n\n\n\n\nUseful tips\n\n\n\n\nThe __init__.py file can contain a list of functions to be loaded when the module is imported. It allows to expose functions to users in a concise way.\nYou can also import modules with relative paths, using ., .., ..., etc.\n\n\n\nReference: Absolute vs Relative Imports in Python by Mbithe Nzomo.\n\n\n\nThe built-in function dir() is used to find out which names a module defines. It returns a sorted list of strings:\n\nimport fibo, numpy\ndir(fibo)\n\n['__builtins__',\n '__cached__',\n '__doc__',\n '__file__',\n '__loader__',\n '__name__',\n '__package__',\n '__spec__',\n 'fib_list',\n 'fib_print']\n\n\n\ndir(numpy)\n\n\n\n\n['ALLOW_THREADS',\n 'AxisError',\n 'BUFSIZE',\n 'CLIP',\n 'ComplexWarning',\n 'DataSource',\n 'ERR_CALL',\n 'ERR_DEFAULT',\n 'ERR_IGNORE',\n 'ERR_LOG',\n 'ERR_PRINT',\n 'ERR_RAISE',\n 'ERR_WARN',\n 'FLOATING_POINT_SUPPORT',\n 'FPE_DIVIDEBYZERO',\n 'FPE_INVALID',\n 'FPE_OVERFLOW',\n 'FPE_UNDERFLOW',\n 'False_',\n 'Inf',\n 'Infinity',\n 'MAXDIMS',\n 'MAY_SHARE_BOUNDS',\n 'MAY_SHARE_EXACT',\n 'ModuleDeprecationWarning',\n 'NAN',\n 'NINF',\n 'NZERO',\n 'NaN',\n 'PINF',\n 'PZERO',\n 'RAISE',\n 'RankWarning',\n 'SHIFT_DIVIDEBYZERO',\n 'SHIFT_INVALID',\n 'SHIFT_OVERFLOW',\n 'SHIFT_UNDERFLOW',\n 'ScalarType',\n 'Tester',\n 'TooHardError',\n 'True_',\n 'UFUNC_BUFSIZE_DEFAULT',\n 'UFUNC_PYVALS_NAME',\n 'VisibleDeprecationWarning',\n 'WRAP',\n '_CopyMode',\n '_NoValue',\n '_UFUNC_API',\n '__NUMPY_SETUP__',\n '__all__',\n '__builtins__',\n '__cached__',\n '__config__',\n '__deprecated_attrs__',\n '__dir__',\n '__doc__',\n '__expired_functions__',\n '__file__',\n '__getattr__',\n '__git_version__',\n '__loader__',\n '__name__',\n '__package__',\n '__path__',\n '__spec__',\n '__version__',\n '_add_newdoc_ufunc',\n '_distributor_init',\n '_financial_names',\n '_globals',\n '_mat',\n '_pyinstaller_hooks_dir',\n '_pytesttester',\n '_version',\n 'abs',\n 'absolute',\n 'add',\n 'add_docstring',\n 'add_newdoc',\n 'add_newdoc_ufunc',\n 'all',\n 'allclose',\n 'alltrue',\n 'amax',\n 'amin',\n 'angle',\n 'any',\n 'append',\n 'apply_along_axis',\n 'apply_over_axes',\n 'arange',\n 'arccos',\n 'arccosh',\n 'arcsin',\n 'arcsinh',\n 'arctan',\n 'arctan2',\n 'arctanh',\n 'argmax',\n 'argmin',\n 'argpartition',\n 'argsort',\n 'argwhere',\n 'around',\n 'array',\n 'array2string',\n 'array_equal',\n 'array_equiv',\n 'array_repr',\n 'array_split',\n 'array_str',\n 'asanyarray',\n 'asarray',\n 'asarray_chkfinite',\n 'ascontiguousarray',\n 'asfarray',\n 'asfortranarray',\n 'asmatrix',\n 'atleast_1d',\n 'atleast_2d',\n 'atleast_3d',\n 'average',\n 'bartlett',\n 'base_repr',\n 'binary_repr',\n 'bincount',\n 'bitwise_and',\n 'bitwise_not',\n 'bitwise_or',\n 'bitwise_xor',\n 'blackman',\n 'block',\n 'bmat',\n 'bool8',\n 'bool_',\n 'broadcast',\n 'broadcast_arrays',\n 'broadcast_shapes',\n 'broadcast_to',\n 'busday_count',\n 'busday_offset',\n 'busdaycalendar',\n 'byte',\n 'byte_bounds',\n 'bytes0',\n 'bytes_',\n 'c_',\n 'can_cast',\n 'cast',\n 'cbrt',\n 'cdouble',\n 'ceil',\n 'cfloat',\n 'char',\n 'character',\n 'chararray',\n 'choose',\n 'clip',\n 'clongdouble',\n 'clongfloat',\n 'column_stack',\n 'common_type',\n 'compare_chararrays',\n 'compat',\n 'complex128',\n 'complex256',\n 'complex64',\n 'complex_',\n 'complexfloating',\n 'compress',\n 'concatenate',\n 'conj',\n 'conjugate',\n 'convolve',\n 'copy',\n 'copysign',\n 'copyto',\n 'core',\n 'corrcoef',\n 'correlate',\n 'cos',\n 'cosh',\n 'count_nonzero',\n 'cov',\n 'cross',\n 'csingle',\n 'ctypeslib',\n 'cumprod',\n 'cumproduct',\n 'cumsum',\n 'datetime64',\n 'datetime_as_string',\n 'datetime_data',\n 'deg2rad',\n 'degrees',\n 'delete',\n 'deprecate',\n 'deprecate_with_doc',\n 'diag',\n 'diag_indices',\n 'diag_indices_from',\n 'diagflat',\n 'diagonal',\n 'diff',\n 'digitize',\n 'disp',\n 'divide',\n 'divmod',\n 'dot',\n 'double',\n 'dsplit',\n 'dstack',\n 'dtype',\n 'e',\n 'ediff1d',\n 'einsum',\n 'einsum_path',\n 'emath',\n 'empty',\n 'empty_like',\n 'equal',\n 'errstate',\n 'euler_gamma',\n 'exp',\n 'exp2',\n 'expand_dims',\n 'expm1',\n 'extract',\n 'eye',\n 'fabs',\n 'fastCopyAndTranspose',\n 'fft',\n 'fill_diagonal',\n 'find_common_type',\n 'finfo',\n 'fix',\n 'flatiter',\n 'flatnonzero',\n 'flexible',\n 'flip',\n 'fliplr',\n 'flipud',\n 'float128',\n 'float16',\n 'float32',\n 'float64',\n 'float_',\n 'float_power',\n 'floating',\n 'floor',\n 'floor_divide',\n 'fmax',\n 'fmin',\n 'fmod',\n 'format_float_positional',\n 'format_float_scientific',\n 'format_parser',\n 'frexp',\n 'from_dlpack',\n 'frombuffer',\n 'fromfile',\n 'fromfunction',\n 'fromiter',\n 'frompyfunc',\n 'fromregex',\n 'fromstring',\n 'full',\n 'full_like',\n 'gcd',\n 'generic',\n 'genfromtxt',\n 'geomspace',\n 'get_array_wrap',\n 'get_include',\n 'get_printoptions',\n 'getbufsize',\n 'geterr',\n 'geterrcall',\n 'geterrobj',\n 'gradient',\n 'greater',\n 'greater_equal',\n 'half',\n 'hamming',\n 'hanning',\n 'heaviside',\n 'histogram',\n 'histogram2d',\n 'histogram_bin_edges',\n 'histogramdd',\n 'hsplit',\n 'hstack',\n 'hypot',\n 'i0',\n 'identity',\n 'iinfo',\n 'imag',\n 'in1d',\n 'index_exp',\n 'indices',\n 'inexact',\n 'inf',\n 'info',\n 'infty',\n 'inner',\n 'insert',\n 'int0',\n 'int16',\n 'int32',\n 'int64',\n 'int8',\n 'int_',\n 'intc',\n 'integer',\n 'interp',\n 'intersect1d',\n 'intp',\n 'invert',\n 'is_busday',\n 'isclose',\n 'iscomplex',\n 'iscomplexobj',\n 'isfinite',\n 'isfortran',\n 'isin',\n 'isinf',\n 'isnan',\n 'isnat',\n 'isneginf',\n 'isposinf',\n 'isreal',\n 'isrealobj',\n 'isscalar',\n 'issctype',\n 'issubclass_',\n 'issubdtype',\n 'issubsctype',\n 'iterable',\n 'ix_',\n 'kaiser',\n 'kernel_version',\n 'kron',\n 'lcm',\n 'ldexp',\n 'left_shift',\n 'less',\n 'less_equal',\n 'lexsort',\n 'lib',\n 'linalg',\n 'linspace',\n 'little_endian',\n 'load',\n 'loadtxt',\n 'log',\n 'log10',\n 'log1p',\n 'log2',\n 'logaddexp',\n 'logaddexp2',\n 'logical_and',\n 'logical_not',\n 'logical_or',\n 'logical_xor',\n 'logspace',\n 'longcomplex',\n 'longdouble',\n 'longfloat',\n 'longlong',\n 'lookfor',\n 'ma',\n 'mask_indices',\n 'mat',\n 'math',\n 'matmul',\n 'matrix',\n 'matrixlib',\n 'max',\n 'maximum',\n 'maximum_sctype',\n 'may_share_memory',\n 'mean',\n 'median',\n 'memmap',\n 'meshgrid',\n 'mgrid',\n 'min',\n 'min_scalar_type',\n 'minimum',\n 'mintypecode',\n 'mod',\n 'modf',\n 'moveaxis',\n 'msort',\n 'multiply',\n 'nan',\n 'nan_to_num',\n 'nanargmax',\n 'nanargmin',\n 'nancumprod',\n 'nancumsum',\n 'nanmax',\n 'nanmean',\n 'nanmedian',\n 'nanmin',\n 'nanpercentile',\n 'nanprod',\n 'nanquantile',\n 'nanstd',\n 'nansum',\n 'nanvar',\n 'nbytes',\n 'ndarray',\n 'ndenumerate',\n 'ndim',\n 'ndindex',\n 'nditer',\n 'negative',\n 'nested_iters',\n 'newaxis',\n 'nextafter',\n 'nonzero',\n 'not_equal',\n 'numarray',\n 'number',\n 'obj2sctype',\n 'object0',\n 'object_',\n 'ogrid',\n 'oldnumeric',\n 'ones',\n 'ones_like',\n 'os',\n 'outer',\n 'packbits',\n 'pad',\n 'partition',\n 'percentile',\n 'pi',\n 'piecewise',\n 'place',\n 'poly',\n 'poly1d',\n 'polyadd',\n 'polyder',\n 'polydiv',\n 'polyfit',\n 'polyint',\n 'polymul',\n 'polynomial',\n 'polysub',\n 'polyval',\n 'positive',\n 'power',\n 'printoptions',\n 'prod',\n 'product',\n 'promote_types',\n 'ptp',\n 'put',\n 'put_along_axis',\n 'putmask',\n 'quantile',\n 'r_',\n 'rad2deg',\n 'radians',\n 'random',\n 'ravel',\n 'ravel_multi_index',\n 'real',\n 'real_if_close',\n 'rec',\n 'recarray',\n 'recfromcsv',\n 'recfromtxt',\n 'reciprocal',\n 'record',\n 'remainder',\n 'repeat',\n 'require',\n 'reshape',\n 'resize',\n 'result_type',\n 'right_shift',\n 'rint',\n 'roll',\n 'rollaxis',\n 'roots',\n 'rot90',\n 'round',\n 'round_',\n 'row_stack',\n 's_',\n 'safe_eval',\n 'save',\n 'savetxt',\n 'savez',\n 'savez_compressed',\n 'sctype2char',\n 'sctypeDict',\n 'sctypes',\n 'searchsorted',\n 'select',\n 'set_numeric_ops',\n 'set_printoptions',\n 'set_string_function',\n 'setbufsize',\n 'setdiff1d',\n 'seterr',\n 'seterrcall',\n 'seterrobj',\n 'setxor1d',\n 'shape',\n 'shares_memory',\n 'short',\n 'show_config',\n 'sign',\n 'signbit',\n 'signedinteger',\n 'sin',\n 'sinc',\n 'single',\n 'singlecomplex',\n 'sinh',\n 'size',\n 'sometrue',\n 'sort',\n 'sort_complex',\n 'source',\n 'spacing',\n 'split',\n 'sqrt',\n 'square',\n 'squeeze',\n 'stack',\n 'std',\n 'str0',\n 'str_',\n 'string_',\n 'subtract',\n 'sum',\n 'swapaxes',\n 'sys',\n 'take',\n 'take_along_axis',\n 'tan',\n 'tanh',\n 'tensordot',\n 'test',\n 'testing',\n 'tile',\n 'timedelta64',\n 'trace',\n 'tracemalloc_domain',\n 'transpose',\n 'trapz',\n 'tri',\n 'tril',\n 'tril_indices',\n 'tril_indices_from',\n 'trim_zeros',\n 'triu',\n 'triu_indices',\n 'triu_indices_from',\n 'true_divide',\n 'trunc',\n 'typecodes',\n 'typename',\n 'ubyte',\n 'ufunc',\n 'uint',\n 'uint0',\n 'uint16',\n 'uint32',\n 'uint64',\n 'uint8',\n 'uintc',\n 'uintp',\n 'ulonglong',\n 'unicode_',\n 'union1d',\n 'unique',\n 'unpackbits',\n 'unravel_index',\n 'unsignedinteger',\n 'unwrap',\n 'use_hugepage',\n 'ushort',\n 'vander',\n 'var',\n 'vdot',\n 'vectorize',\n 'version',\n 'void',\n 'void0',\n 'vsplit',\n 'vstack',\n 'warnings',\n 'where',\n 'who',\n 'zeros',\n 'zeros_like']\n\n\n\n\n To list every element in your symbol table simply call dir().\nReference: Python doc of the dir function\n\n\n\nA namespace is a set of names (functions, variables, etc.). Different namespaces can co-exist at a given time but are completely isolated. In this way, you can control which function you are using.\nA namespace containing all the built-in names is created when we start the python interpreter and exists as long we don’t exit.\n\ncos(3)\n\n\n---------------------------------------------------------------------------\nNameError                                 Traceback (most recent call last)\nCell In[11], line 1\n----&gt; 1 cos(3)\n\nNameError: name 'cos' is not defined\n\n\n\nYou need to import a package for mathematical functions:\n\nimport math, numpy as np\nprint(math.cos(3), np.cos(3))\n\n-0.9899924966004454 -0.9899924966004454\n\n\nReference: Python Namespace and Scope tutorial\n\n\n\nWhen a module named spam is imported, the interpreter first searches for a built-in module with that name. If not found, it then searches for a file named spam.py in a list of directories given by the variable sys.path. The variable sys.path is initialized from these locations:\n\nThe directory containing the input script (or the current directory when no file is specified).\nThe environment variable PYTHONPATH (a list of directory names, with the same syntax as the shell variable PATH).\n\nReference: Python documentation, The Module Search Path\n\n\n\nFind the loader for a module, optionally within the specified path.\n\nimport importlib\nspam_spec = importlib.util.find_spec(\"spam\")\nfound = spam_spec is not None\nprint(found)\n\nFalse\n\n\nNow,\n\nimport numpy\nnumpy_spec = importlib.util.find_spec(\"numpy\")\nprint(numpy_spec)\n\nModuleSpec(name='numpy', loader=&lt;_frozen_importlib_external.SourceFileLoader object at 0x7f125cc13b20&gt;, origin='/opt/hostedtoolcache/Python/3.10.18/x64/lib/python3.10/site-packages/numpy/__init__.py', submodule_search_locations=['/opt/hostedtoolcache/Python/3.10.18/x64/lib/python3.10/site-packages/numpy'])\n\n\nshould return more information and where the loader is.\nReferences:\n\nPython doc on find_loader\nHow to check if a Python module exists without importing it on Stackoverflow\n\n\n\n\nA module can contain executable statements as well as function definitions. These statements are intended to initialize the module. They are executed only the first time the module name is encountered in an import statement.\nTo force a module to be reloaded, you can use importlib.reload().\nRemark: when using ipython (interactive python, an ancestor of the jupyter notebook), one can use the “magic” command %autoreload 2\nReferences: - Python doc on reload - IPython autoreload\n\n\n\nTo speed up loading modules, python caches the compiled version of each module in the __pycache__ directory under the name module.version.pyc, where the version encodes the format of the compiled file; it generally contains the python version number.\nFor example, in CPython release 3.3 the compiled version of spam.py would be cached as __pycache__/spam.cpython-33.pyc. This naming convention allows compiled modules from different releases and different versions of python to coexist.\n\n\n\n\n\n\nUseful git tip\n\n\n\nYou should add __pycache__ entry in your .gitignore file to avoid adding a compiled python file to your project.",
    "crumbs": [
      "OOP",
      "Creating a Python module"
    ]
  },
  {
    "objectID": "Courses/OPP/modules.html#the-python-package-index-pypi-repository",
    "href": "Courses/OPP/modules.html#the-python-package-index-pypi-repository",
    "title": "Creating a Python module",
    "section": "The python Package Index (Pypi) repository",
    "text": "The python Package Index (Pypi) repository\nThe python Package Index, abbreviated as PyPI, is the official third-party software repository for python. PyPI primarily hosts python packages in the form of archives called sdists (source distributions) or pre-compiled “wheels”.\n\n\n\n\n\n\nEXERCISE: pypi\n\n\n\n\nGo to https://test.pypi.org/ and describe the aim of this repository.\n\n\n\n\nPip\npip is a de facto standard package-management system used to install and manage software packages from PyPi.\n$ pip install some-package-name\n$ pip uninstall some-package-name\n$ pip search some-package-name\n\n\n\n\n\n\nEXERCISE:\n\n\n\n\nInstall the modules pooch, setuptools, pandas, pygal and pygal_maps_fr. Beware, you should use the option --user to force the installation in your home directory.\nList all the package in your venv using pip.\n\n\n\nIt is possible to install a local module with pip\n$ pip install /path/to/my/local/module\nwhere /path/to/my/local/module is the path to the module. But if some changes occur in the /path/to/my/local/module folder, the module will not be reloaded. This might be annoying during the development stage. To force python to reload the module at each change call, consider the -e option:\n$ pip install -e /path/to/my/local/module",
    "crumbs": [
      "OOP",
      "Creating a Python module"
    ]
  },
  {
    "objectID": "Courses/OPP/modules.html#creating-a-python-module",
    "href": "Courses/OPP/modules.html#creating-a-python-module",
    "title": "Creating a Python module",
    "section": "Creating a python module",
    "text": "Creating a python module\nWe are going to create a simple package. The structure is always similar, and an example can be found for instance here.\nReference: How To Package Your Python Code\n\nPicking a name\npython module/package names should generally follow the following constraints:\n\nAll lowercase (🇫🇷: en minuscule)\nUnique on PyPI, even if you do not want to make your package publicly available (you might want to specify it privately as a dependency later)\nUnderscore-separated or no word separators at all, and do not use hyphens (i.e., use _ not -).\n\nWe are going to create a module called biketrauma to visualize the bicycle_db (Source: here, adapted for the original version from there) used in the some of these lectures.\n\n\nModule structure\nThe initial directory structure for biketrauma should look like this:\npackaging_tutorial/\n    ├── biketrauma/\n    │     ├── __init__.py\n    │     └── data/\n    ├── setup.py\n    └── .gitignore\nThe top-level directory is the root of our Version Control System (e.g. git) repository packaging_tutorial. The sub-directory, biketrauma, is the actual python module.\n\n\n\n\n\n\nEXERCISE: packaging\n\n\n\nWe are going to create a new python module that can be used to visualize the bike dataset.\n\nCreate a new folder ~/packaging_tutorial/ and initialize a git in it.\nCreate a .gitignore file to ignore __pycache__, .vscode directories and files containing the string egg-info or dist in their name as well.\nPush your work into a new repository on your github.\nCreate a sub-folder ~/packaging_tutorial/biketrauma. This is where our python module will be stored.\nCreate a ~/packaging_tutorial/biketrauma/__init__.py file where a string __version__ defined at 0.0.1.\nCreate an empty sub-folder ~/packaging_tutorial/biketrauma/data locally on your computer/session. How to add it to git? (Hint: .gitkeep)\nCreate an empty ~/packaging_tutorial/setup.py file.\nCommit and push into your repository.\n\nReference: Single-sourcing the package version.\n\n\n\n\nSub-modules\nThe final directory structure of our module will look like:\npackaging_tutorial/\n    ├── biketrauma/\n    │     ├── __init__.py\n    │     ├── io/\n    │     │     ├─ __init__.py\n    │     │     └─ Load_db.py\n    │     ├── preprocess/\n    │     │     ├─ __init__.py\n    │     │     └─ get_accident.py\n    │     └── vis/\n    │     │     ├─ __init__.py\n    │     │     └─ plot_location.py\n    │     └── data/\n    │     │     └─ .gitkeep\n    ├── setup.py\n    ├── script.py\n    └── .gitignore\n\n\n\n\n\n\nEXERCISE: modules\n\n\n\nSee the git repo of the course: the subfolder Courses/Python-modules/modules_files: contains some files you should include into your package tree:\n\nCopy the script.py into the project root folder.\nAdd some sub-folders to biketrauma directory called io (for input/output), preprocess, vis (for visualization). Add an empty __init__.py file into the module and sub-module folders.\nPopulate the preprocess sub-module with the get_accident.py file.\nPopulate the vis sub-module with the plot_location.py file.\nPopulate the io sub-module with the file Load_db.py (it downloads the bike dataset). At the loading step of the io sub-module, it should create the following variables (Hint: this is done in the __init__.py file)\nurl_db = \"https://github.com/josephsalmon/HAX712X/raw/main/Data/accidents-velos_2022.csv.xz\"\npath_target = os.path.join(\n    os.path.dirname(os.path.realpath(__file__)), \"..\", \"data\", \"bicycle_db.csv.xz\"\n)\nCommit your changes.\n\n\n\n\n\nFix the import\nIn order to load the functions in the io, preprocess and vis sub-modules, you can add the following lines to the ~/packaging_tutorial/biketrauma/__init__.py:\nfrom .io.Load_db import Load_db\nfrom .vis.plot_location import plot_location\nfrom .preprocess.get_accident import get_accident\n\n\n\n\n\n\nEXERCISE:\n\n\n\n\nBe sure to have the following packages installed (Hint: this list could be saved in a requirements.txt file in the project root folder.):\ntqdm\npygal_maps_fr\npooch\npandas\nnumpy\npygal\nsetuptools\nlxml\nCheck that your module does work by launching the script.\n$ cd ~/packaging_tutorial\n$ python script.py\nYou can then open the file created file biketrauma_map.svg in a navigator: {=html}  &lt;center&gt;   &lt;iframe width= 100% height=500 src=\"biketrauma_map.svg\"&gt;&lt;/iframe&gt;  &lt;/center&gt; \nCommit and push your changes.\n\n\n\n\n\nPackage the module with setuptools\nThe main setup configuration file, setup.py, should contain a single call to setuptools.setup(), like so:\nfrom setuptools import setup\nfrom biketrauma import __version__ as current_version\n\nsetup(\n  name='biketrauma',\n  version=current_version,\n  description='Visualization of a bicycle accident db',\n  url='http://github.com/xxxxxxxxxxx.git',\n  author='xxxxxxxxxxx',\n  author_email='xxxxxxxxxx@xxxxxxxxxxxxx.xxx',\n  license='MIT',\n  packages=['biketrauma','biketrauma.io', 'biketrauma.preprocess', 'biketrauma.vis'],\n  zip_safe=False\n)\nTo create a sdist package (a source distribution):\n$ cd ~/packaging_tutorial/\n$ python setup.py sdist\nThis will create dist/biketrauma-0.0.1.tar.gz inside the top-level directory. You can now install it with\n$ pip install ~/packaging_tutorial/dist/biketrauma-0.0.1.tar.gz\nReferences:\n\nBuilding and Distributing Packages with Setuptools\nPackaging Python Projects\n\n\n\nAdd requirement file\nTo get a list of the installed packages in your current Venv, you can use the following command:\n$ pip freeze &gt; requirements.txt\nUnfortunately, it may generate a huge collection of package dependencies. To get a sparser list, you can use pipreqs.\n\n\n\n\n\n\nEXERCISE: requirements\n\n\n\nCreate a minimal requirements.txt file with pipreqs. Add it to the biketrauma module.\n\n\n\n\nUpload on PyPI\ntwine is a utility for publishing python packages on PyPI. We are going to use the test repository https://test.pypi.org/.\n\n\n\n\n\n\nEXERCISE:\n\n\n\n\nCreate an account on the PyPI test repository.\nThis is quite easy to upload a python module on PyPI:\nCreate some distributions in the normal way:\n$ python setup.py sdist bdist_wheel\nUpload with twine to Test PyPI and verify things look right. Twine will automatically prompt for your username and password:\n$ twine upload --repository-url https://test.pypi.org/legacy/ dist/*\nusername: ...\npassword: ...\nUpload to PyPI:\n$ twine upload dist/*\n\n\n\n\n\n\n\n\n\nAbout the data folder\n\n\n\nWe have included the data folder in the sub-module tree which is not a good practice: permission may not be granted in the destination dir of the module… A better idea could be to create a data folder in a cache or temp directory.",
    "crumbs": [
      "OOP",
      "Creating a Python module"
    ]
  },
  {
    "objectID": "Courses/OPP/modules.html#references",
    "href": "Courses/OPP/modules.html#references",
    "title": "Creating a Python module",
    "section": "References",
    "text": "References\n\nPython Packaging User Guide\nTwine, uploads of source, provides additional documentation on using twine to upload packages to PyPI.",
    "crumbs": [
      "OOP",
      "Creating a Python module"
    ]
  },
  {
    "objectID": "Courses/Test_Python/Profiling_Debugging.html",
    "href": "Courses/Test_Python/Profiling_Debugging.html",
    "title": "Debugging & Profiling",
    "section": "",
    "text": "References:\n\nBuilt-in magic commands\nautoreload\n\nmagic commands are IPython commands such as: %timeit, %matplotlib, %autoreload. They work only in interactive cases (Ipython, Jupyter Notebook, Jupyter lab, etc.).\n\nimport time\nimport numpy as np\nimport matplotlib.pyplot as plt\n\nn = 1000\nval = 5.4\n\nLet us compare the time to create a vector of size n and fill it with the value val with various methods, using the `\n\nprint('Using empty and fill:')\n%timeit a = np.empty(n); a.fill(val)\n# Alternative: uncomment below\n# from IPython import get_ipython\n# get_ipython().run_line_magic('timeit', 'a = np.empty(n); a.fill(val)')\n\nUsing empty and fill:\n694 ns ± 3.34 ns per loop (mean ± std. dev. of 7 runs, 1,000,000 loops each)\n\n\n\nprint('Using empty and list syntax:')\n%timeit a = np.empty(n); a[:] = val\n\nUsing empty and list syntax:\n910 ns ± 1.83 ns per loop (mean ± std. dev. of 7 runs, 1,000,000 loops each)\n\n\n\nprint('Using full:')\n%timeit a = np.full((n,), val)\n\nUsing full:\n1.92 µs ± 6.17 ns per loop (mean ± std. dev. of 7 runs, 1,000,000 loops each)\n\n\n\nprint('Using ones:')\n%timeit a = np.ones(n) * val\n\nUsing ones:\n3.43 µs ± 9.04 ns per loop (mean ± std. dev. of 7 runs, 100,000 loops each)\n\n\n\nprint('Using repeat:')\n%timeit a = np.repeat(val, n)\n\nUsing repeat:\n5.48 µs ± 7.38 ns per loop (mean ± std. dev. of 7 runs, 100,000 loops each)\n\n\n\n\n\nAnother classical way to time a chunk of code is to use the time module, as follows:\n\nimport time\nstart = time.time()\na = np.ones(n) * val\nend = time.time()\nprint(f\"Execution time: {end - start:.5f} s.\")\n\nExecution time: 0.00010 s.",
    "crumbs": [
      "Testing Tools",
      "Debugging & Profiling"
    ]
  },
  {
    "objectID": "Courses/Test_Python/Profiling_Debugging.html#time-efficiency",
    "href": "Courses/Test_Python/Profiling_Debugging.html#time-efficiency",
    "title": "Debugging & Profiling",
    "section": "",
    "text": "References:\n\nBuilt-in magic commands\nautoreload\n\nmagic commands are IPython commands such as: %timeit, %matplotlib, %autoreload. They work only in interactive cases (Ipython, Jupyter Notebook, Jupyter lab, etc.).\n\nimport time\nimport numpy as np\nimport matplotlib.pyplot as plt\n\nn = 1000\nval = 5.4\n\nLet us compare the time to create a vector of size n and fill it with the value val with various methods, using the `\n\nprint('Using empty and fill:')\n%timeit a = np.empty(n); a.fill(val)\n# Alternative: uncomment below\n# from IPython import get_ipython\n# get_ipython().run_line_magic('timeit', 'a = np.empty(n); a.fill(val)')\n\nUsing empty and fill:\n694 ns ± 3.34 ns per loop (mean ± std. dev. of 7 runs, 1,000,000 loops each)\n\n\n\nprint('Using empty and list syntax:')\n%timeit a = np.empty(n); a[:] = val\n\nUsing empty and list syntax:\n910 ns ± 1.83 ns per loop (mean ± std. dev. of 7 runs, 1,000,000 loops each)\n\n\n\nprint('Using full:')\n%timeit a = np.full((n,), val)\n\nUsing full:\n1.92 µs ± 6.17 ns per loop (mean ± std. dev. of 7 runs, 1,000,000 loops each)\n\n\n\nprint('Using ones:')\n%timeit a = np.ones(n) * val\n\nUsing ones:\n3.43 µs ± 9.04 ns per loop (mean ± std. dev. of 7 runs, 100,000 loops each)\n\n\n\nprint('Using repeat:')\n%timeit a = np.repeat(val, n)\n\nUsing repeat:\n5.48 µs ± 7.38 ns per loop (mean ± std. dev. of 7 runs, 100,000 loops each)\n\n\n\n\n\nAnother classical way to time a chunk of code is to use the time module, as follows:\n\nimport time\nstart = time.time()\na = np.ones(n) * val\nend = time.time()\nprint(f\"Execution time: {end - start:.5f} s.\")\n\nExecution time: 0.00010 s.",
    "crumbs": [
      "Testing Tools",
      "Debugging & Profiling"
    ]
  },
  {
    "objectID": "Courses/Test_Python/Profiling_Debugging.html#memory-efficiency",
    "href": "Courses/Test_Python/Profiling_Debugging.html#memory-efficiency",
    "title": "Debugging & Profiling",
    "section": "Memory efficiency",
    "text": "Memory efficiency\n\nmemory_profiler\nThis module is deprecated and do not run with Python 3.12\nYou can run a memory profiler with the following magic command (other alternatives are available but require more coding and exporting the reports):\n%load_ext memory_profiler\nFor illustration we compare a way to perform a distance matrix computation between two vectors, using a double loop or a vectorized approach.\n\nn1 = 100\nn2 = 100\nx = np.random.randn(n1)\ny = np.random.randn(n2)\n\n\n%%file mprun_demo.py\nimport numpy as np\n\n\ndef inv_distance(x, y):\n    n1 = len(x)\n    n2 = len(y)\n    dist = np.empty((n1, n2))\n    for i in range(n1):\n        for j in range(n2):\n            dist[i, j] = 1.0 / np.sqrt((x[i] - y[j]) ** 2)\n    return dist\n\n\ndef inv_distance_vect(x, y):\n    n1 = len(x)\n    n2 = len(y)\n    return 1.0 / np.sqrt((x.reshape((n1, 1)) - y.reshape((1, n2))) ** 2)\n\nOverwriting mprun_demo.py\n\n\nWe can time the execution of the two functions:\n\nfrom mprun_demo import inv_distance, inv_distance_vect\n%timeit inv_distance(x, y)\n%timeit inv_distance_vect(x, y)\n\n12.1 ms ± 23 µs per loop (mean ± std. dev. of 7 runs, 100 loops each)\n31.3 µs ± 36 ns per loop (mean ± std. dev. of 7 runs, 10,000 loops each)\n\n\nThe conclusion is simple: try to avoid loops in Python when performing matrix computation, and use vectorization and broadcasting as much as possible (or use numba or cython).\nSome memory profiling can be performed with the memory_profiler package to investigate any difference in the memory footprint:\n%mprun -f inv_distance inv_distance(x, y)\n%mprun -T mprun0 -f inv_distance_vect inv_distance_vect(x, y)\nprint(open('mprun0', 'r').read())\nIn this case, the difference is almost negligible concerning memory, only the time computation was significantly different between the two approaches.",
    "crumbs": [
      "Testing Tools",
      "Debugging & Profiling"
    ]
  },
  {
    "objectID": "Courses/Test_Python/Profiling_Debugging.html#profiling",
    "href": "Courses/Test_Python/Profiling_Debugging.html#profiling",
    "title": "Debugging & Profiling",
    "section": "Profiling",
    "text": "Profiling\nA profile is a set of statistics that describes the time taken by various parts of a program.\n\ncProfile\nThe cProfile module provides deterministic profiling of Python programs. A profile is a set of statistics describing how often and for how long various parts of the program run.\nLet us illustrate the profiling for some of the previous examples.\n\nimport cProfile\ncProfile.run('a = np.empty(n); a.fill(val)','fill.prof')\n\n\ncProfile.run('a = np.ones(n) * val','ones.prof')\n\n\ncProfile.run('inv_distance_vect(x, y)', 'inv_distance_vect.prof')\n\n\n\nline_profiler\nYou can use inline magic commands to profile a function line by line.\n%load_ext line_profiler\n%lprun -f inv_distance_vect inv_distance_vect(x, y)\nor\n%lprun -T lprof0 -f inv_distance inv_distance(x, y)\nprint(open('lprof0', 'r').read())\nAn alternative is to use the kernprof package and @profile decorator, see examples here.\n\n\nVisualization of the profiling results\n\nsnakeviz: a browser-based graphical viewer for the output of Python’s cProfile. Here is a video tutorial. Launch the command snakeviz program.prof\n\n\n%load_ext snakeviz\n%snakeviz -t inv_distance(x, y)\n\n \n*** Profile stats marshalled to file '/tmp/tmpp_fwk9j9'.\nOpening SnakeViz in a new tab...\n\n\nsnakeviz: error: no web browser found: could not locate runnable browser\n\nusage: snakeviz [-h] [-v] [-H ADDR] [-p PORT] [-b BROWSER_PATH] [-s] filename\n\nStart SnakeViz to view a Python profile.\n\npositional arguments:\n  filename              Python profile to view\n\noptions:\n  -h, --help            show this help message and exit\n  -v, --version         show program's version number and exit\n  -H ADDR, --hostname ADDR\n                        hostname to bind to (default: 127.0.0.1)\n  -p PORT, --port PORT  port to bind to; if this port is already in use a free\n                        port will be selected automatically (default: 8080)\n  -b BROWSER_PATH, --browser BROWSER_PATH\n                        name of webbrowser to launch as described in the\n                        documentation of Python's webbrowser module:\n                        https://docs.python.org/3/library/webbrowser.html\n  -s, --server          start SnakeViz in server-only mode--no attempt will be\n                        made to open a browser\n\n\nsnakeviz web server started on 127.0.0.1:8080; enter Ctrl-C to exit\nhttp://127.0.0.1:8080/snakeviz/%2Ftmp%2Ftmpp_fwk9j9\n\n\nThe output generated is an interactive file that can be investigated in a browser, looking like:\n\n\n\nsnakeviz\n\n\n\ngprof2dot a Python script to convert the output from many profilers (including cProfile’s output) into a dot graph, with export in .svg. You can run it in your terminal with the following commands: default     python -m cProfile -o output.pstats inv_distances.py     gprof2dot.py -f pstats output.pstats | dot -Tsvg -o output.svg You can then display the .svg file:  \n`viztracer: a nice solution that provides html output with interactive visualization. This can lead to very large traces for non-trivial programs. In this case it is recommended to trim the shortest function calls from the trace file before attempting to load it in the visualizer (See filter options here).\npy-spy: this package can be combined with speedscope for nice visualization.\ngeneral help on Python profiling",
    "crumbs": [
      "Testing Tools",
      "Debugging & Profiling"
    ]
  },
  {
    "objectID": "Courses/Test_Python/Profiling_Debugging.html#debugging-with-pdb",
    "href": "Courses/Test_Python/Profiling_Debugging.html#debugging-with-pdb",
    "title": "Debugging & Profiling",
    "section": "Debugging with pdb",
    "text": "Debugging with pdb\nLet us use import pdb; pdb.set_trace() to enter a code and inspect it. Push the key c and then enter to go next.\nA first recommendation is to use the python debugger in your IDE.\nPure python or IPython can use the pdb package and the command pdb.set_trace(). A command prompt launches when an error is met, and you can check the current status of the environment. Useful shortcuts are available (e.g., the c key or the j key, etc.); a full list is available here. For instance, you can quit the debugger with the command q or quit\ndef function_debile(x):\n    answer = 42\n    answer += x\n    return answer\nfunction_debile(12)\ndef illustrate_pdb(x):\n    answer = 42\n    for i in range(10):\n        import pdb; pdb.set_trace()\n        answer += i\n    answer += x\n    return answer\nillustrate_pdb(12)\nA terminal is launched when a problem occurs, and one can then take over and see what’s going on.\nget_ipython().run_line_magic('pdb', '')\n# %pdb\ndef blobl_func(x):\n    answer = 0\n    for i in range(x, -1, -1):\n        print(i)\n        answer += 1 / i\n\n    return answer\n\nblobl_func(4)",
    "crumbs": [
      "Testing Tools",
      "Debugging & Profiling"
    ]
  },
  {
    "objectID": "Courses/Test_Python/Profiling_Debugging.html#debugging-with-vscode",
    "href": "Courses/Test_Python/Profiling_Debugging.html#debugging-with-vscode",
    "title": "Debugging & Profiling",
    "section": "Debugging with VSCode",
    "text": "Debugging with VSCode\nYou can use the debugger in VSCode to debug your code. Here is a video by Arjan Code on the topic.\nThe main point is that you can set breakpoints in your code and then run the debugger to inspect the variables and the flow of the code. All that is done in the IDE, which is very convenient.\nFor that just click on the left of the line number to set a breakpoint, and then run the debugger with the green arrow.\nBelow is a simple example of a code that can be debugged in VSCode:\n\n# %%\ndef sieve_of_eratosthenes(limit):\n    # Create a boolean array \"prime[0..limit]\" and initialize\n    # all entries it as false. A value in prime[i] will\n    # finally be false if i is Not a prime, true if i is a prime.\n    prime = [True for _ in range(limit + 1)]\n    p = 2\n    while p * p &lt; limit:\n        # If prime[p] is not changed, then it is a prime\n        if prime[p] == True:\n            # Update all multiples of p\n            for i in range(p * p, limit + 1, p):\n                prime[i] = False\n        p += 1\n\n    # Collect all prime numbers\n    prime_numbers = [p for p in range(2, limit) if prime[p]]\n    return prime_numbers\n\n\nprint(sieve_of_eratosthenes(100))\nprint(sieve_of_eratosthenes(101))\nClick on  and let the debugger run. You can then inspect the variables and the flow of the code to understand what it is doing.\nReferences:\n\nDebugging Jupyter notebooks by David Hamann\nAdvanced Python Debugging with pdb by Steven Kryskalla\nDebug Python with VSCode",
    "crumbs": [
      "Testing Tools",
      "Debugging & Profiling"
    ]
  },
  {
    "objectID": "Courses/Test_Python/Unit_Test.html",
    "href": "Courses/Test_Python/Unit_Test.html",
    "title": "Unit Tests",
    "section": "",
    "text": "Disclaimer: this course is adapted from the following sources:",
    "crumbs": [
      "Testing Tools",
      "Unit Tests"
    ]
  },
  {
    "objectID": "Courses/Test_Python/Unit_Test.html#tests",
    "href": "Courses/Test_Python/Unit_Test.html#tests",
    "title": "Unit Tests",
    "section": "Tests",
    "text": "Tests\nTests are small pieces of code ensuring that a part of a program is working as expected.\n\nWhy tests are useful\nThis is why we place the uttermost importance on implementing tests along the development steps. It will help you to ensure:\n\nthat code works correctly.\nthat changes do not break anything.\nthat bugs are not reintroduced.\nrobustness to user errors.\ncode is reachable (i.e., it will actually be executed)\netc.\n\n\n\nTypes of tests\nThere are different kinds of tests, with the more important ones being:\n\nUnit tests: test whether a simple unit element (function, class, etc.) does the right thing.\nIntegration tests: test whether the different parts used by your software work well together.\nNon-regression tests: test whether a new or modified functionality works correctly and that previous functionalities were not affected (e.g., removing a bug does not alter the rest of the code).\n\n\n\nHow to test?\nMany coding languages come with their own test framework. In python, we will focus on pytest. It is simple though powerful. pytest searches for all test*.py files and runs all test* methods found. It outputs a nice error report.\n\n\n\n\n\n\nEXERCISE: pytest\n\n\n\n\nInstall pytest with pip using the user scheme (--user option)\nTest if the command pytest is in your PATH (depending on your configuration you will have to add ~/.local/bin in PATH)\n\n\n\nGet the path to pytest binary as follows with python:\n\nimport pytest\npytest.__path__\n\nThis outputs a directory containing the pytest binary, say /path/to/pytest. Then, to add the path containing pytest in your (Linux) system, you have to type the following command in your terminal:\n$ export PATH=$PATH:/path/to/pytest\n$ pytest --help\n\n\nExample\nLet us assume we have a file inc.py containing\ndef inc1(x):\n    return x + 1\n\ndef inc2(x):\n    return x + 2\nThence, the content of test_inc.py is\nfrom inc import inc1, inc2\n\n# This test will work\ndef test_inc1():\n    assert inc1(3) == 4\n\n# This test will fail\ndef test_inc2():\n    assert inc2(-1) == 4\nTo run these tests:\n$ pytest test_inc.py\n\n\n\n\n\n\nEXERCISE: documentation\n\n\n\n\nCorrect the test_inc2 test.\nDetermine the syntax to run any test in a directory.\nDetermine the syntax to run only the test called test_inc1.",
    "crumbs": [
      "Testing Tools",
      "Unit Tests"
    ]
  },
  {
    "objectID": "Courses/Test_Python/Unit_Test.html#code-coverage",
    "href": "Courses/Test_Python/Unit_Test.html#code-coverage",
    "title": "Unit Tests",
    "section": "Code coverage",
    "text": "Code coverage\npytest comes with some useful plugins. In particular, we will use the coverage report plugin.\nA test coverage is a measure used to describe the degree to which the source code of a program is executed when a particular test suite runs. A program with high test coverage, measured as a percentage, has had more of its source code executed during testing: this suggests it has a lower chance of containing undetected software bugs compared to a program with low test coverage.\nTo install the coverage plugin simply run the pip command:\n$ pip install pytest-cov\nAssuming the inc_cov.py contains:\ndef inc(x):\n    if x &lt; 0:\n        return 0\n    return x + 1\n\ndef dec(x):\n     return x - 1\nand a single test is performed through the file test_inc_cov.py\nfrom inc_cov import inc\n\ndef test_inc():\n     assert inc(3) == 4\nthen\npytest test_inc_cov.py --cov\n============================= test session starts =============================\nplatform linux -- Python 3.10.10, pytest-7.4.2, pluggy-1.0.0\nrootdir: /home/jsalmon/Documents/Mes_cours/Montpellier/HAX712X/Courses/Test\nplugins: dash-2.9.3, cov-4.1.0, anyio-3.6.2\ncollected 1 item\n\ntest_inc_cov.py                                                          [100%]\n\n---------- coverage: platform linux, python 3.10.10-final-0 ----------\nName              Stmts   Miss  Cover\n-------------------------------------\ninc_cov.py            6      2    67%\ntest_inc_cov.py       3      0   100%\n-------------------------------------\nTOTAL                 9      2    78%\n\n\n===============================================================================\n1 passed in 0.02s\n===============================================================================\nTwo lines in inc_cov module were not used. See\npytest --cov --cov-report=html test_inc_cov.py\n\n============================= test session starts =============================\nplatform linux -- Python 3.10.10, pytest-7.4.2, pluggy-1.0.0\nrootdir: /home/jsalmon/Documents/Mes_cours/Montpellier/HAX712X/Courses/Test\nplugins: dash-2.9.3, cov-4.1.0, anyio-3.6.2\ncollected 1 item\n\ntest_inc_cov.py                                                          [100%]\n\n---------- coverage: platform linux, python 3.10.10-final-0 ----------\nCoverage HTML written to dir htmlcov\nfor details.\n\n\n\n\n\n\nEXERCISE:\n\n\n\n\nInstall the pytest’s coverage plugin.\nLoad the biketrauma package you can download at https://github.com/HMMA238-2020/biketrauma/\nAdd some unit tests to biketrauma in a new sub-directory ./biketrauma/tests/:\n\nCreate a first test_df() that test if the Côtes-d’or département has 152 accidents. Add a second test_df_log() testing that the log of the number of accidents in the département 92 is close to 7.161622002.\nCreate a test_dl() function that tests the md5sum hash of the downloaded file (a.k.a. bicycle_db.csv). You may use the pooch package or you can use this piece of code to compute the md5sum:\n\n\n\n\nimport hashlib\ndef md5(fname):\n    hash_md5 = hashlib.md5()\n    with open(fname, \"rb\") as f:\n        for chunk in iter(lambda: f.read(4096), b\"\"):\n            hash_md5.update(chunk)\n    return hash_md5.hexdigest()\nBy running the following line in the biketrauma/biketrauma location:\npytest --cov-report=html --cov=biketrauma tests/\nyou should reach 79% of code coverage, and the report should look like this (see the htmlcov/index.html file for an interactive report):\n---------- coverage: platform linux, python 3.10.10-final-0 ----------\nName                                    Stmts   Miss  Cover\n----------------------------------------------------------------------\nbiketrauma/__init__.py                      4      0   100%\nbiketrauma/io/Load_db.py                   22      5    77%\nbiketrauma/io/__init__.py                   3      0   100%\nbiketrauma/preprocess/__init__.py           0      0   100%\nbiketrauma/preprocess/get_accident.py       7      0   100%\nbiketrauma/vis/__init__.py                  0      0   100%\nbiketrauma/vis/plot_location.py             6      4    33%\n----------------------------------------------------------------------\nTOTAL                                      42      9    79%",
    "crumbs": [
      "Testing Tools",
      "Unit Tests"
    ]
  },
  {
    "objectID": "Courses/Test_Python/Unit_Test.html#references",
    "href": "Courses/Test_Python/Unit_Test.html#references",
    "title": "Unit Tests",
    "section": "References",
    "text": "References\n\nThe pytest documentation\nWikipedia: Code coverage",
    "crumbs": [
      "Testing Tools",
      "Unit Tests"
    ]
  },
  {
    "objectID": "Courses/Git/Errors.html",
    "href": "Courses/Git/Errors.html",
    "title": "Handle errors in Git",
    "section": "",
    "text": "In this part, we will learn how to correct some small errors in Git: create a branch that you do not want, modify the main branch, forget files in the commit, etc.\n\n\nLet’s create a folder “Test” and initiate a repo.\n\n\nCreate a file and commit it. If you main branch is named “master”, type:\n$ git branch -M main\nThen create a new branch “branchTest”. But you did not want to create this branch now but after adding some files. To delete it:\n$ git branch -d branchTest\nIf you have previously done modifications on this branch, use:\n$ git branch -D branchTest\n\n\n\nIt is possible to modify a main branch inadvertently. There are two scenarios.\n\n\nIn this case, you have modified the main before creating your branch and you have not committed anything. You need to create a “stash”: you put your modifications aside and then apply them to your new branch.\nModify a file on the main branch. Create a stash (kind of buffer):\n$ git stash\nIf you type git status, you see that your main branch is clean. Create a new branch “branchBeforeCommit”. Then apply the stash:\n$ git stash apply\nIf you have created many stashes, you can access their ID via:\n$ git stash list\nThen you can use git stash apply followed by the ID.\n\n\n\nThe case where you commit the modifications is more complex. Let’s modify the files and commit. With git log, you can access the ID/hash of your previous commits. Let’s suppress the last commit with:\n$ git reset --hard HEAD^\nCreate your new branch and use git reset --hard followed by the hash to apply the commit to your new branch.\n\n\n\n\nThe processing is very simple, just type:\n$ git commit --amend -m \"new commit message\"\n\n\n\nIn the case where you forget to add a file to the last commit, use again git commit --amend --no-edit after git add.\n\n\n\n\nIn this situation, you have pushed wrong files. We will present two important commands: git reset (already glimpsed) and git revert.\n\n\nLet’s imagine a client requires some functionaly but changes his mind the next day. You will go backward with git reset: this command has a impact on the historic. It can be used with three parameters: --hard, --medium and --soft. It is a command often use locally.\nLet’s begin with --hard:\n$ git reset --hard target_commit\nThis command enables to go backward to any target commit but you absolutely forget everything that occurs after!.\nThe option --medium enables to go backward just after the last commit or a specific one, without suppressing the last modifications. It is very useful to desindex a file that has not been committed.\n$ git reset --mixed HEAD~\nThe last option --soft makes it possible to move on a specific commit to see a snapshot or to create a new branch from a previous commit: it does not suppress files or commits.\n\n\n\nLet’s imagine you have added the wrong file to your commit. Instead of suppressing the commit from the historic, git revert creates a new commit with the last content: you do not loose the historic of your project. In the our scenario, you do your commit, you “cancel” it with:\n$ git revert HEAD\nThen you can remove the wrong file and recommit.\n\n\n\n\n\n\nThe goal of Git is to record the changes applied to your code:\n\nwho has contributed ?\nWhere bugs have been introduced ?\nCancel problematic changes.\n\nWe have seen that git log lists all the commits from the most recent to the oldest with their hash code. In order to have more details of your historic, use git reflog lists the commits but all the other actions: message modifications, merge, reset, etc. To move on a previous action, use git checkout hash.\n\n\n\nIf you discover a bug in your project, you want to identify its origin and to track every line of code. git blame file displays for each line:\n\nits ID\nits author\nthe date of the modification\nthe line number\nthe content\n\n\n\n\nSometimes, you do not want to merge a whole branch into another and you only need some specific commits. Imagine you work on “Branch1” and you do many commits but your colleague does not need all the modifications but only some. Type:\n$ git cherry-pick hashs\nto duplicate the commits and add them to your main branch.\n\n\n\n\nLet’s imagine you develop a new functionality and during this time you note a bug and need to correct it. The method is the following:\n\nkeep into memory what you currently make using git stash\nfind the bug using git log and git bisect\nrestore the problematic file with git revert hash\nrestore what you have done using git stash apply.\n\nThe new command here is git bisect with different options:\n\nstart to begin the research of the bug\nbad HEAD to indicate that the bug is present in the last commit\ngood hash to indicate the most recent commit that does not have the bug From now, the command launches a dichomotic algorithm. For each commit where the command moves on indicate git bisect good if the bug is not present and git bisect bad if not. At the end of the process, you have finally found the commit where the bug appears for the first time, then use git revert hash.",
    "crumbs": [
      "Git",
      "Handle errors in Git"
    ]
  },
  {
    "objectID": "Courses/Git/Errors.html#errors-in-local-repository",
    "href": "Courses/Git/Errors.html#errors-in-local-repository",
    "title": "Handle errors in Git",
    "section": "",
    "text": "Let’s create a folder “Test” and initiate a repo.\n\n\nCreate a file and commit it. If you main branch is named “master”, type:\n$ git branch -M main\nThen create a new branch “branchTest”. But you did not want to create this branch now but after adding some files. To delete it:\n$ git branch -d branchTest\nIf you have previously done modifications on this branch, use:\n$ git branch -D branchTest\n\n\n\nIt is possible to modify a main branch inadvertently. There are two scenarios.\n\n\nIn this case, you have modified the main before creating your branch and you have not committed anything. You need to create a “stash”: you put your modifications aside and then apply them to your new branch.\nModify a file on the main branch. Create a stash (kind of buffer):\n$ git stash\nIf you type git status, you see that your main branch is clean. Create a new branch “branchBeforeCommit”. Then apply the stash:\n$ git stash apply\nIf you have created many stashes, you can access their ID via:\n$ git stash list\nThen you can use git stash apply followed by the ID.\n\n\n\nThe case where you commit the modifications is more complex. Let’s modify the files and commit. With git log, you can access the ID/hash of your previous commits. Let’s suppress the last commit with:\n$ git reset --hard HEAD^\nCreate your new branch and use git reset --hard followed by the hash to apply the commit to your new branch.\n\n\n\n\nThe processing is very simple, just type:\n$ git commit --amend -m \"new commit message\"\n\n\n\nIn the case where you forget to add a file to the last commit, use again git commit --amend --no-edit after git add.",
    "crumbs": [
      "Git",
      "Handle errors in Git"
    ]
  },
  {
    "objectID": "Courses/Git/Errors.html#errors-in-the-remote-repository",
    "href": "Courses/Git/Errors.html#errors-in-the-remote-repository",
    "title": "Handle errors in Git",
    "section": "",
    "text": "In this situation, you have pushed wrong files. We will present two important commands: git reset (already glimpsed) and git revert.\n\n\nLet’s imagine a client requires some functionaly but changes his mind the next day. You will go backward with git reset: this command has a impact on the historic. It can be used with three parameters: --hard, --medium and --soft. It is a command often use locally.\nLet’s begin with --hard:\n$ git reset --hard target_commit\nThis command enables to go backward to any target commit but you absolutely forget everything that occurs after!.\nThe option --medium enables to go backward just after the last commit or a specific one, without suppressing the last modifications. It is very useful to desindex a file that has not been committed.\n$ git reset --mixed HEAD~\nThe last option --soft makes it possible to move on a specific commit to see a snapshot or to create a new branch from a previous commit: it does not suppress files or commits.\n\n\n\nLet’s imagine you have added the wrong file to your commit. Instead of suppressing the commit from the historic, git revert creates a new commit with the last content: you do not loose the historic of your project. In the our scenario, you do your commit, you “cancel” it with:\n$ git revert HEAD\nThen you can remove the wrong file and recommit.",
    "crumbs": [
      "Git",
      "Handle errors in Git"
    ]
  },
  {
    "objectID": "Courses/Git/Errors.html#go-backward-in-your-project",
    "href": "Courses/Git/Errors.html#go-backward-in-your-project",
    "title": "Handle errors in Git",
    "section": "",
    "text": "The goal of Git is to record the changes applied to your code:\n\nwho has contributed ?\nWhere bugs have been introduced ?\nCancel problematic changes.\n\nWe have seen that git log lists all the commits from the most recent to the oldest with their hash code. In order to have more details of your historic, use git reflog lists the commits but all the other actions: message modifications, merge, reset, etc. To move on a previous action, use git checkout hash.\n\n\n\nIf you discover a bug in your project, you want to identify its origin and to track every line of code. git blame file displays for each line:\n\nits ID\nits author\nthe date of the modification\nthe line number\nthe content\n\n\n\n\nSometimes, you do not want to merge a whole branch into another and you only need some specific commits. Imagine you work on “Branch1” and you do many commits but your colleague does not need all the modifications but only some. Type:\n$ git cherry-pick hashs\nto duplicate the commits and add them to your main branch.",
    "crumbs": [
      "Git",
      "Handle errors in Git"
    ]
  },
  {
    "objectID": "Courses/Git/Errors.html#correct-a-bug",
    "href": "Courses/Git/Errors.html#correct-a-bug",
    "title": "Handle errors in Git",
    "section": "",
    "text": "Let’s imagine you develop a new functionality and during this time you note a bug and need to correct it. The method is the following:\n\nkeep into memory what you currently make using git stash\nfind the bug using git log and git bisect\nrestore the problematic file with git revert hash\nrestore what you have done using git stash apply.\n\nThe new command here is git bisect with different options:\n\nstart to begin the research of the bug\nbad HEAD to indicate that the bug is present in the last commit\ngood hash to indicate the most recent commit that does not have the bug From now, the command launches a dichomotic algorithm. For each commit where the command moves on indicate git bisect good if the bug is not present and git bisect bad if not. At the end of the process, you have finally found the commit where the bug appears for the first time, then use git revert hash.",
    "crumbs": [
      "Git",
      "Handle errors in Git"
    ]
  },
  {
    "objectID": "Courses/Git/Collaborative_PartI.html",
    "href": "Courses/Git/Collaborative_PartI.html",
    "title": "Collaborative Git (PartI)",
    "section": "",
    "text": "In this part, we will imagine that you work with a colleague.\n\n\nLet’s copy the repository in two folders:\n$ git clone git_adress mycomputer\n$ git clone git_adress colleague_computer\nLet’s create a new file in the folder “mycomputer”:\n$ echo \"first_model: 60% Accuracy\" &gt;&gt; first_model.py\nThen, add this file to the index, commit the modification and send them to the repo. Next step: return to the colleague’s computer and retrieve the new file. Your colleague also modify “first_model”,commit and send it to the repo:\n$ echo \"improvement model: 80% Accuracy\" &gt;&gt; first_model.py\nLet us indicate a small trick. It is possible to combine add and commit (if the file has been already added to the index):\n$ git commit -am message\n\n\n\nLet’s imagine that we want to experiment some pre-processing, a new model, to debug some specific parts. If you do that directly on the branch “main” and send it to the repo, it will suppress what your colleague have done before (its new work). Therefore, we create a (parallel) branch:\n$ git branch  preprocess_test\nTo move on this branch:\n$ git checkout preprocess_test\nIt is possible to do the two things at the same time:\n$ git checkout -b preprocess_test\nLet’s add a new file to this branch:\n$ echo \"label encoder\" &gt;&gt; preprocessing_test.py\nLet’s add it to the index and commit:\n$ git add preprocessing_test.py\n$ git commit -m \"experimental step of preprocessing\"\nYou can see that the file appears on the branch “preprocessing_test” but not on main. This is due to the fact, you have commited the new file on the “preprocessing_test” branch. Then try to push the modification: it does not work. Let’s explain why. Briefly, the “main” branch has the “origin/main” has a remote associated branch but not the branch “preprocess_test”. So you have to write:\n$ git push --set-upstream origin preprocess_test\nYou can configure the repo to associate a similar remote branch to each branch by typing:\ngit config --add --bool push.autoSetupRemote true\n\n\n\nLet’s say you are satisfied from your work and you want to integrate your new functionality. But you need a feedback/checking of one of your colleague. This is the object of a pull request (PR).\nOn Github, click on Pull Request -&gt; New pull request. After comparing the new branch the main one, create pull request. On this page, you find:\n\na box to enter a comment on your PR: say why you have written this code.\na list of commits\nthe number of files that have been added, modified or deleted.\n\nAt this stage, one of your colleague has to checked your work and merge it, that is to say, integrate the last changes to the main branch. How to do this:\n\nonline by clicking on “Merge pull request”\nlocally once main is updated:\n\ngit merge preprocess_test\nIn practice, git merge creates a commit whose the parents are the last commit of “main” and “preprocess_test”.\nIf you return to the main page on Github, you can see that:\n\nthe last commit is the merge one\nthe file “preprocessing_test.py” is now on the main branch.\n\nFinally, you can retrieve the last changes as well as your colleague with git pull.\nRessource: Tutorial on branch\n\n\n\nImagine you want to integrate a new file of data to your project or a model that takes different kind of inputs. This may impact the exploration of your data, the clearning, the development of the statistical algorithms, etc.\nOne may do all these changes and commit, push the code. But your poor colleague will receive a lot of lines of code and try to understand and check them. The modifications that he/she will see do not appear clearly in a logical order:\n\n\n\nBad Pull Request\n\n\nInstead of this, prefer to commit each functionality. The central question is: does each of your commit have one special purpose?\nUntil now, we have presented a simple scenario where you are the only collaborator to do modifications. Let’s present the real scenario where one collaborator has also modified the code, in the next part.",
    "crumbs": [
      "Git",
      "Collaborative Git (PartI)"
    ]
  },
  {
    "objectID": "Courses/Git/Collaborative_PartI.html#share-code-with-my-colleague-small-exercise",
    "href": "Courses/Git/Collaborative_PartI.html#share-code-with-my-colleague-small-exercise",
    "title": "Collaborative Git (PartI)",
    "section": "",
    "text": "Let’s copy the repository in two folders:\n$ git clone git_adress mycomputer\n$ git clone git_adress colleague_computer\nLet’s create a new file in the folder “mycomputer”:\n$ echo \"first_model: 60% Accuracy\" &gt;&gt; first_model.py\nThen, add this file to the index, commit the modification and send them to the repo. Next step: return to the colleague’s computer and retrieve the new file. Your colleague also modify “first_model”,commit and send it to the repo:\n$ echo \"improvement model: 80% Accuracy\" &gt;&gt; first_model.py\nLet us indicate a small trick. It is possible to combine add and commit (if the file has been already added to the index):\n$ git commit -am message",
    "crumbs": [
      "Git",
      "Collaborative Git (PartI)"
    ]
  },
  {
    "objectID": "Courses/Git/Collaborative_PartI.html#create-branch-for-experiment-or-debugging",
    "href": "Courses/Git/Collaborative_PartI.html#create-branch-for-experiment-or-debugging",
    "title": "Collaborative Git (PartI)",
    "section": "",
    "text": "Let’s imagine that we want to experiment some pre-processing, a new model, to debug some specific parts. If you do that directly on the branch “main” and send it to the repo, it will suppress what your colleague have done before (its new work). Therefore, we create a (parallel) branch:\n$ git branch  preprocess_test\nTo move on this branch:\n$ git checkout preprocess_test\nIt is possible to do the two things at the same time:\n$ git checkout -b preprocess_test\nLet’s add a new file to this branch:\n$ echo \"label encoder\" &gt;&gt; preprocessing_test.py\nLet’s add it to the index and commit:\n$ git add preprocessing_test.py\n$ git commit -m \"experimental step of preprocessing\"\nYou can see that the file appears on the branch “preprocessing_test” but not on main. This is due to the fact, you have commited the new file on the “preprocessing_test” branch. Then try to push the modification: it does not work. Let’s explain why. Briefly, the “main” branch has the “origin/main” has a remote associated branch but not the branch “preprocess_test”. So you have to write:\n$ git push --set-upstream origin preprocess_test\nYou can configure the repo to associate a similar remote branch to each branch by typing:\ngit config --add --bool push.autoSetupRemote true",
    "crumbs": [
      "Git",
      "Collaborative Git (PartI)"
    ]
  },
  {
    "objectID": "Courses/Git/Collaborative_PartI.html#pull-request",
    "href": "Courses/Git/Collaborative_PartI.html#pull-request",
    "title": "Collaborative Git (PartI)",
    "section": "",
    "text": "Let’s say you are satisfied from your work and you want to integrate your new functionality. But you need a feedback/checking of one of your colleague. This is the object of a pull request (PR).\nOn Github, click on Pull Request -&gt; New pull request. After comparing the new branch the main one, create pull request. On this page, you find:\n\na box to enter a comment on your PR: say why you have written this code.\na list of commits\nthe number of files that have been added, modified or deleted.\n\nAt this stage, one of your colleague has to checked your work and merge it, that is to say, integrate the last changes to the main branch. How to do this:\n\nonline by clicking on “Merge pull request”\nlocally once main is updated:\n\ngit merge preprocess_test\nIn practice, git merge creates a commit whose the parents are the last commit of “main” and “preprocess_test”.\nIf you return to the main page on Github, you can see that:\n\nthe last commit is the merge one\nthe file “preprocessing_test.py” is now on the main branch.\n\nFinally, you can retrieve the last changes as well as your colleague with git pull.\nRessource: Tutorial on branch",
    "crumbs": [
      "Git",
      "Collaborative Git (PartI)"
    ]
  },
  {
    "objectID": "Courses/Git/Collaborative_PartI.html#philosophy-of-commit-commit-early-commit-often",
    "href": "Courses/Git/Collaborative_PartI.html#philosophy-of-commit-commit-early-commit-often",
    "title": "Collaborative Git (PartI)",
    "section": "",
    "text": "Imagine you want to integrate a new file of data to your project or a model that takes different kind of inputs. This may impact the exploration of your data, the clearning, the development of the statistical algorithms, etc.\nOne may do all these changes and commit, push the code. But your poor colleague will receive a lot of lines of code and try to understand and check them. The modifications that he/she will see do not appear clearly in a logical order:\n\n\n\nBad Pull Request\n\n\nInstead of this, prefer to commit each functionality. The central question is: does each of your commit have one special purpose?\nUntil now, we have presented a simple scenario where you are the only collaborator to do modifications. Let’s present the real scenario where one collaborator has also modified the code, in the next part.",
    "crumbs": [
      "Git",
      "Collaborative Git (PartI)"
    ]
  },
  {
    "objectID": "Courses/Git/Basis_PartI.html",
    "href": "Courses/Git/Basis_PartI.html",
    "title": "Basic commands: locally",
    "section": "",
    "text": "A repository is a place where you store the code.\n$ git init --bare ~/reposTest/firstProject.git\nWe initialized this repository as we have created a repository on Internet. Later, we will create the repository in Github. But for now, imagine that it is the case.\n\n\n\nThe repository is for now empty. Let’s clone an empty project. It is useless but this enables to learn the syntax to do it: in practice, we clone from an Internet adress. The syntax is:\n$ git clone repository_adress(remote) localFolder\nIn our case:\n$ git clone reposTest/firstProject.git firstProject\nLet’s enter in this folder. Let’s type git status and to check if the repertory has been cloned. If you type ls -a you can see a folder “.git”. It’s thanks to it that your folder is a repository and that git follows the modifications.\n\n\n\nLet’s first create a file in this folder:\n$ echo \"Accuracy: 60%\" &gt;&gt; basic_model.py\nWith git status, we see that git has detected the new file.\nNow, we want to follow the future modifications of this file (future snapshots=commits).\n$ git add basic_model.py\nYou can check that the file is followed by git using git status. The command means that you add the file to the git index located in the folder “.git”.\n\n\n\nIn this part, imagine that we have data file (csv) and a script to process it.\n$ mkdir data\n$ echo data &gt;&gt; data/housing.csv\n$ touch \"pre_process.py\"\nYou indicate that you track all the files:\n$ git add .\nBut you do not want to track the csv files (you usually do not follow data files), what can you do to suppress the csv file from the index:\n$ git rm --cached data/housing.csv\nIn fact, you will never track the csv file, so how to tell to git to ignore the folder data forever. To do this you need to create a file .gitignore and write all the files that you do not want to track in this file.\n$ echo \"data/\" &gt;&gt; .gitignore\nYou will want to add this file to your remote repository. But you do not do this immediately since it is preferable to do a commit for the code and another for gitignore.\n\n\n\nIn this part, you will do your first commit. You can see a commit as a snapshot of your code. Let’s type git commit with the “-m” option to add a message:\n$ git commit -m \"first ML model\"\nExercise (easy): Add “.gitignore” to the index and commit with an adapted message.\nThe commits are useful to:\n\nknow the previous states of the code\nget back to a previous state if one functionality does not work as expected. If your commit message is explicit, it is easier to find a previous commit.\n\n\n\n\nTo display the history of your commit, use:\n$ git log \nThe list of commits appears from the newest to oldest. To each commit a hash code (an ID) is associated to precisely identify it.\n\n\n\nIn this part, you have initialized a repository (imagine that it is in Internet) and clone it on your folder. Let’s create another folder to pretend to have another computer and clone the faking remote repository:\n$ mkdir ../another_computer\n$ cd ../another_computer\n$ git clone ../../reposTest/firstProject.git firstProject\nNow, let’s send the last modifications to the faking remote repository with git push (pousser):\n$ cd ../firstProject\n$ git push \nReturn now to your faking computer to recover the last modifications with git pull (tirer):\n$ cd ../another_computer/firstProject\n$ git pull\nIn the next part, we will work with a real remote repository on Github but without collaborators.",
    "crumbs": [
      "Git",
      "Basic commands: locally"
    ]
  },
  {
    "objectID": "Courses/Git/Basis_PartI.html#initialization",
    "href": "Courses/Git/Basis_PartI.html#initialization",
    "title": "Basic commands: locally",
    "section": "",
    "text": "A repository is a place where you store the code.\n$ git init --bare ~/reposTest/firstProject.git\nWe initialized this repository as we have created a repository on Internet. Later, we will create the repository in Github. But for now, imagine that it is the case.",
    "crumbs": [
      "Git",
      "Basic commands: locally"
    ]
  },
  {
    "objectID": "Courses/Git/Basis_PartI.html#clone-a-project",
    "href": "Courses/Git/Basis_PartI.html#clone-a-project",
    "title": "Basic commands: locally",
    "section": "",
    "text": "The repository is for now empty. Let’s clone an empty project. It is useless but this enables to learn the syntax to do it: in practice, we clone from an Internet adress. The syntax is:\n$ git clone repository_adress(remote) localFolder\nIn our case:\n$ git clone reposTest/firstProject.git firstProject\nLet’s enter in this folder. Let’s type git status and to check if the repertory has been cloned. If you type ls -a you can see a folder “.git”. It’s thanks to it that your folder is a repository and that git follows the modifications.",
    "crumbs": [
      "Git",
      "Basic commands: locally"
    ]
  },
  {
    "objectID": "Courses/Git/Basis_PartI.html#how-to-follow-the-different-versions-of-my-files",
    "href": "Courses/Git/Basis_PartI.html#how-to-follow-the-different-versions-of-my-files",
    "title": "Basic commands: locally",
    "section": "",
    "text": "Let’s first create a file in this folder:\n$ echo \"Accuracy: 60%\" &gt;&gt; basic_model.py\nWith git status, we see that git has detected the new file.\nNow, we want to follow the future modifications of this file (future snapshots=commits).\n$ git add basic_model.py\nYou can check that the file is followed by git using git status. The command means that you add the file to the git index located in the folder “.git”.",
    "crumbs": [
      "Git",
      "Basic commands: locally"
    ]
  },
  {
    "objectID": "Courses/Git/Basis_PartI.html#how-to-untrack-your-file",
    "href": "Courses/Git/Basis_PartI.html#how-to-untrack-your-file",
    "title": "Basic commands: locally",
    "section": "",
    "text": "In this part, imagine that we have data file (csv) and a script to process it.\n$ mkdir data\n$ echo data &gt;&gt; data/housing.csv\n$ touch \"pre_process.py\"\nYou indicate that you track all the files:\n$ git add .\nBut you do not want to track the csv files (you usually do not follow data files), what can you do to suppress the csv file from the index:\n$ git rm --cached data/housing.csv\nIn fact, you will never track the csv file, so how to tell to git to ignore the folder data forever. To do this you need to create a file .gitignore and write all the files that you do not want to track in this file.\n$ echo \"data/\" &gt;&gt; .gitignore\nYou will want to add this file to your remote repository. But you do not do this immediately since it is preferable to do a commit for the code and another for gitignore.",
    "crumbs": [
      "Git",
      "Basic commands: locally"
    ]
  },
  {
    "objectID": "Courses/Git/Basis_PartI.html#first-commit",
    "href": "Courses/Git/Basis_PartI.html#first-commit",
    "title": "Basic commands: locally",
    "section": "",
    "text": "In this part, you will do your first commit. You can see a commit as a snapshot of your code. Let’s type git commit with the “-m” option to add a message:\n$ git commit -m \"first ML model\"\nExercise (easy): Add “.gitignore” to the index and commit with an adapted message.\nThe commits are useful to:\n\nknow the previous states of the code\nget back to a previous state if one functionality does not work as expected. If your commit message is explicit, it is easier to find a previous commit.",
    "crumbs": [
      "Git",
      "Basic commands: locally"
    ]
  },
  {
    "objectID": "Courses/Git/Basis_PartI.html#display-the-recent-history-of-your-repo",
    "href": "Courses/Git/Basis_PartI.html#display-the-recent-history-of-your-repo",
    "title": "Basic commands: locally",
    "section": "",
    "text": "To display the history of your commit, use:\n$ git log \nThe list of commits appears from the newest to oldest. To each commit a hash code (an ID) is associated to precisely identify it.",
    "crumbs": [
      "Git",
      "Basic commands: locally"
    ]
  },
  {
    "objectID": "Courses/Git/Basis_PartI.html#send-your-code-on-a-remote-repository-and-recover-it",
    "href": "Courses/Git/Basis_PartI.html#send-your-code-on-a-remote-repository-and-recover-it",
    "title": "Basic commands: locally",
    "section": "",
    "text": "In this part, you have initialized a repository (imagine that it is in Internet) and clone it on your folder. Let’s create another folder to pretend to have another computer and clone the faking remote repository:\n$ mkdir ../another_computer\n$ cd ../another_computer\n$ git clone ../../reposTest/firstProject.git firstProject\nNow, let’s send the last modifications to the faking remote repository with git push (pousser):\n$ cd ../firstProject\n$ git push \nReturn now to your faking computer to recover the last modifications with git pull (tirer):\n$ cd ../another_computer/firstProject\n$ git pull\nIn the next part, we will work with a real remote repository on Github but without collaborators.",
    "crumbs": [
      "Git",
      "Basic commands: locally"
    ]
  },
  {
    "objectID": "Courses/Bash/handled_files.html",
    "href": "Courses/Bash/handled_files.html",
    "title": "Manipulate files and permissions",
    "section": "",
    "text": "Two commands make it possible to do this:\n\ncat already seen (display the whole file). ‘-n’ for the line number.\nless display the file page by page. Here are some useful shortcuts:\n\nSpace displays the next part of the file.\nEntry displays the next line.\nb goes back to the last part.\nq stops the reading.\n\n\n\n\n\nTwo commands make it possible to do this:\n\nhead retrieves the first lines. Option ‘n’ indicates the number of lines we want to display.\ntail for the end of a file. Same option ‘n’. Option ‘f’ to follow the evolution of a file.\n\n\n\n\n\ncp copies a file. If you want to do a copy of “testfile”:\n\n$ cp testfile testcopie\nThe option ‘-R’ enables to copy a whole folder. Let’s see a powerful application using the wildcard (‘joker’) *:\n$ cp jeu* jeuFolder\nmakes it possible to copy all the files beginning by jeu to the folder “jeuFolder”.\nMini Exercise (easy): copy all the jpeg images to another folder.\n\n`` mv ``` is useful to move a file or rename it.\n\n$ mv file Folder\nMini Exercise (easy): move all the csv files to another folder.\nYou can use ‘mv’ to rename a file:\n$ mv firstName secondName\n\n\n\nWe use the command rm.\n$ rm firstFile secondFile\nThe option ‘-i’ enables to ask confirmation for each file. The option ‘-r’ can supress all a folder:\n$ rm -r folder\n\n\n\nThere are two kinds of links (shortcuts) in Linux created with ln:\n\nPhysical links\nSymbolic ones\n\nTo understand their differences, we have to present some elements on the way Linux handles files.\n\n\nOn the hard drive, each file is split into two parts:\n\nthe name\nthe permissions\nthe content\n\nThe names and the contents are not stored at the same place! Each file has an identification number called the inode: file-&gt; inode -&gt; content.\n\n\n\nA physical link makes it possible to have two names that refer to the same content (inode).\n$ touch file1\n$ ln file1 file2\n$ ls -l\nIf you change ‘file1’ or ‘file2’, you change the same content.\n\n\n\nLet’s type:\n$ ln -s file1 file2\n$ ls -l\n“file2” points towards the name of ‘file1’ and not to its content.\n\n\n\n\nIn Linux, several users can be connected at the same time. Each user has its own account and its own persimissions (rights to do something).\n\n\nAmong the users, there is the root (the super-user) with all the rights. Users can be gather into groups.\n\n\n\nUsers and groups\n\n\n\n\nThis require your password in order to execute the command with the root permission:\n$ sudo commande\n\n\n\n$ sudo su \nTo quit this mode, type exit or Ctrl+D.\n\n\n\n\nIf you want to add the user ‘yanis’:\n$ sudo adduser yanis \nIf you want to change his password lately, you can use:\n$ sudo passwd yanis  \nTo supress its account, use:\n$ sudo deluser yanis  \nTo also suppress his home, add the following option:\n$ sudo deluser --remove-home yanis\n\n\n\nTo create a new group, use:\n$ sudo addgroup family\nBut anyone is present in this group.\nTo edit an user, we use usermod. If you want to add ‘yanis’ to the group ‘family’:\n$ sudo usermod family yanis\nIf you want to suppress the group:\n$ sudo delgroup family\n\n\n\nOnly the root can modify the owner of a file. If you want to modify the owner of a file (make yanis the owner of ‘filtest’):\n$ sudo chown yanis testFile\nYou can use chgrp to do the same thing with a group:\n$ sudo chgrp family testFile\nThe same thing could be done with chown by separating the new user and group by a ::\n$ sudo chown yanis:family testFile\nOne can use the option ‘-R’ to do this recursively:\n$ sudo chown -R yanis:family Folder\n\n\n\n\n\nWhen you type:\n$ ls -l\nThe first column indicates five different permissions:\n\nd indicates if the element is a folder\nl indicates if the element is a link\nr indicates if you can read the element\nw indicates if you can write/modify the element\nx for a file indicates that you can run it. For a folder, you can see the different sub-folders.\n\n\n\n\nPermissions/Rights\n\n\n\n\n\nHere we will use chmod (sudo is not necessary: we just need to be the owner of the file). We can give permissions with two methods: using numbers or letters.\n\n\n\nchmod numbers\n\n\nTo combine the permissions, we have to add up these numbers. If you want to give reading and writing rights, this corresponds to \\(4+2=6\\):\n$ chmod 640 fileTest\nThe previous command gives:\n\nreading and writing rights for the owner\nreading right for the group\nnothing for the others.\n\nAnother way exists with letter. We need to know that:\n\nu=user\ng=grou\no=other\n‘+’ means adding the permission\n‘-’ means removing the permission\n‘=’ to affect permissions\n\nIf you want to affect all the rights to the user and the reading permission to the group:\n$ chmod u=rwx, g+r fileTest\n\n\n\n\n\nIn this part, we explain how to install a sofware on Debian (this depends on the Linux distributions). In Linux, we have packages: a zip folder that contains all the files of the program: it is a file .deb which contains all the instructions to install a program. We have to focus on two specific points of Linux:\n\nadministration of the dependences: very often, a sofware depends on others softwares called the dependencies.\nAll the packages are gathered at the same place, called the repository.\n\nTo download the last list of packages, use:\n$ sudo apt-get update\nTo dowload a package, use (install openarena for instance):\n$ sudo apt-get install nomPackage \nTo supress a package and all its useless dependencies, use:\n$ sudo apt-get autoremove nomPackage\nTo update all the packages:\n$ sudo apt-get upgrade \n\n\n\nIn this short part, we explain how to use the manual to have all the ways to use a command.\nIf you want to know everything on a command (say mkdir), use:\n$ sudo man mkdir\nTo move on this page:\n\nEspace to go to the next page.\n/ to research a word in this documentation\nQ to quit the page.\n\nEach man usage displays the following sections:\n\nNAME and a short description\nSYNOPSIS lists all the ways to use the command.\nDESCRIPTION is a deeper description of the commands with all the options.\nAUTHOR of the program.\nREPORTING BUGS the people to contact for a bug.\nCOPYRIGHT user license.\nSEE ALSO others related commands.\n\nman is useful if you know the name of the command. Otherwhise, use apropos. For instance, if you look for a command related to the sound of your machine (gives all the command which talks about sound in their description):\n$ apropos sound\n\n\n\nThere is a lot of commands in this direction. The most popular and powerful command is find. It goes all over your hard drive. The command can use three kinds of arguments:\n\nwhere: it is the folder where we look for.\nwhat: it is the file we look for (by name, size, date,…).\naction: automatic actions on the selected files.\n\n\n\nFind a file by name in the current directory:\n$ find -name \"research.png\"\nIf you want to find the file called ‘research.png’ in the directory ‘folder’:\n$ find folder -name \"research.png\"\nResearch with the size:\n$ find ~ -size +10M\nResearch with the date of the last access (less than 7 days):\n$ find ~ -name \".odt\" -atime 6 \n\n\n\nYou can add an action to the result of the search. For instance, if you want to delete the results:\n$ find ~ -name \".odt\" -delete \nWith exec you can execute a command for all the files giving by find. Let’s say that you want to change the permissions of all the ‘.odt’ files:\n$ find ~ -name \".odt\" -exec chmod 640 {} \\; \nHow does it work? For each file found, the command after exec is executed. The curly brackets ‘{}’ will be replaced by the name of this file. The command must end with ‘;’.\nExercise: gather all your .jpeg files into a folder ‘images’.",
    "crumbs": [
      "Bash",
      "Manipulate files and permissions"
    ]
  },
  {
    "objectID": "Courses/Bash/handled_files.html#display-content-file",
    "href": "Courses/Bash/handled_files.html#display-content-file",
    "title": "Manipulate files and permissions",
    "section": "",
    "text": "Two commands make it possible to do this:\n\ncat already seen (display the whole file). ‘-n’ for the line number.\nless display the file page by page. Here are some useful shortcuts:\n\nSpace displays the next part of the file.\nEntry displays the next line.\nb goes back to the last part.\nq stops the reading.",
    "crumbs": [
      "Bash",
      "Manipulate files and permissions"
    ]
  },
  {
    "objectID": "Courses/Bash/handled_files.html#display-the-beginning-and-the-end-of-a-file",
    "href": "Courses/Bash/handled_files.html#display-the-beginning-and-the-end-of-a-file",
    "title": "Manipulate files and permissions",
    "section": "",
    "text": "Two commands make it possible to do this:\n\nhead retrieves the first lines. Option ‘n’ indicates the number of lines we want to display.\ntail for the end of a file. Same option ‘n’. Option ‘f’ to follow the evolution of a file.",
    "crumbs": [
      "Bash",
      "Manipulate files and permissions"
    ]
  },
  {
    "objectID": "Courses/Bash/handled_files.html#copy-and-displacement",
    "href": "Courses/Bash/handled_files.html#copy-and-displacement",
    "title": "Manipulate files and permissions",
    "section": "",
    "text": "cp copies a file. If you want to do a copy of “testfile”:\n\n$ cp testfile testcopie\nThe option ‘-R’ enables to copy a whole folder. Let’s see a powerful application using the wildcard (‘joker’) *:\n$ cp jeu* jeuFolder\nmakes it possible to copy all the files beginning by jeu to the folder “jeuFolder”.\nMini Exercise (easy): copy all the jpeg images to another folder.\n\n`` mv ``` is useful to move a file or rename it.\n\n$ mv file Folder\nMini Exercise (easy): move all the csv files to another folder.\nYou can use ‘mv’ to rename a file:\n$ mv firstName secondName",
    "crumbs": [
      "Bash",
      "Manipulate files and permissions"
    ]
  },
  {
    "objectID": "Courses/Bash/handled_files.html#supress-files",
    "href": "Courses/Bash/handled_files.html#supress-files",
    "title": "Manipulate files and permissions",
    "section": "",
    "text": "We use the command rm.\n$ rm firstFile secondFile\nThe option ‘-i’ enables to ask confirmation for each file. The option ‘-r’ can supress all a folder:\n$ rm -r folder",
    "crumbs": [
      "Bash",
      "Manipulate files and permissions"
    ]
  },
  {
    "objectID": "Courses/Bash/handled_files.html#create-links-between-files",
    "href": "Courses/Bash/handled_files.html#create-links-between-files",
    "title": "Manipulate files and permissions",
    "section": "",
    "text": "There are two kinds of links (shortcuts) in Linux created with ln:\n\nPhysical links\nSymbolic ones\n\nTo understand their differences, we have to present some elements on the way Linux handles files.\n\n\nOn the hard drive, each file is split into two parts:\n\nthe name\nthe permissions\nthe content\n\nThe names and the contents are not stored at the same place! Each file has an identification number called the inode: file-&gt; inode -&gt; content.\n\n\n\nA physical link makes it possible to have two names that refer to the same content (inode).\n$ touch file1\n$ ln file1 file2\n$ ls -l\nIf you change ‘file1’ or ‘file2’, you change the same content.\n\n\n\nLet’s type:\n$ ln -s file1 file2\n$ ls -l\n“file2” points towards the name of ‘file1’ and not to its content.",
    "crumbs": [
      "Bash",
      "Manipulate files and permissions"
    ]
  },
  {
    "objectID": "Courses/Bash/handled_files.html#the-users-and-their-permissions",
    "href": "Courses/Bash/handled_files.html#the-users-and-their-permissions",
    "title": "Manipulate files and permissions",
    "section": "",
    "text": "In Linux, several users can be connected at the same time. Each user has its own account and its own persimissions (rights to do something).\n\n\nAmong the users, there is the root (the super-user) with all the rights. Users can be gather into groups.\n\n\n\nUsers and groups\n\n\n\n\nThis require your password in order to execute the command with the root permission:\n$ sudo commande\n\n\n\n$ sudo su \nTo quit this mode, type exit or Ctrl+D.\n\n\n\n\nIf you want to add the user ‘yanis’:\n$ sudo adduser yanis \nIf you want to change his password lately, you can use:\n$ sudo passwd yanis  \nTo supress its account, use:\n$ sudo deluser yanis  \nTo also suppress his home, add the following option:\n$ sudo deluser --remove-home yanis\n\n\n\nTo create a new group, use:\n$ sudo addgroup family\nBut anyone is present in this group.\nTo edit an user, we use usermod. If you want to add ‘yanis’ to the group ‘family’:\n$ sudo usermod family yanis\nIf you want to suppress the group:\n$ sudo delgroup family\n\n\n\nOnly the root can modify the owner of a file. If you want to modify the owner of a file (make yanis the owner of ‘filtest’):\n$ sudo chown yanis testFile\nYou can use chgrp to do the same thing with a group:\n$ sudo chgrp family testFile\nThe same thing could be done with chown by separating the new user and group by a ::\n$ sudo chown yanis:family testFile\nOne can use the option ‘-R’ to do this recursively:\n$ sudo chown -R yanis:family Folder\n\n\n\n\n\nWhen you type:\n$ ls -l\nThe first column indicates five different permissions:\n\nd indicates if the element is a folder\nl indicates if the element is a link\nr indicates if you can read the element\nw indicates if you can write/modify the element\nx for a file indicates that you can run it. For a folder, you can see the different sub-folders.\n\n\n\n\nPermissions/Rights\n\n\n\n\n\nHere we will use chmod (sudo is not necessary: we just need to be the owner of the file). We can give permissions with two methods: using numbers or letters.\n\n\n\nchmod numbers\n\n\nTo combine the permissions, we have to add up these numbers. If you want to give reading and writing rights, this corresponds to \\(4+2=6\\):\n$ chmod 640 fileTest\nThe previous command gives:\n\nreading and writing rights for the owner\nreading right for the group\nnothing for the others.\n\nAnother way exists with letter. We need to know that:\n\nu=user\ng=grou\no=other\n‘+’ means adding the permission\n‘-’ means removing the permission\n‘=’ to affect permissions\n\nIf you want to affect all the rights to the user and the reading permission to the group:\n$ chmod u=rwx, g+r fileTest",
    "crumbs": [
      "Bash",
      "Manipulate files and permissions"
    ]
  },
  {
    "objectID": "Courses/Bash/handled_files.html#software-installation",
    "href": "Courses/Bash/handled_files.html#software-installation",
    "title": "Manipulate files and permissions",
    "section": "",
    "text": "In this part, we explain how to install a sofware on Debian (this depends on the Linux distributions). In Linux, we have packages: a zip folder that contains all the files of the program: it is a file .deb which contains all the instructions to install a program. We have to focus on two specific points of Linux:\n\nadministration of the dependences: very often, a sofware depends on others softwares called the dependencies.\nAll the packages are gathered at the same place, called the repository.\n\nTo download the last list of packages, use:\n$ sudo apt-get update\nTo dowload a package, use (install openarena for instance):\n$ sudo apt-get install nomPackage \nTo supress a package and all its useless dependencies, use:\n$ sudo apt-get autoremove nomPackage\nTo update all the packages:\n$ sudo apt-get upgrade",
    "crumbs": [
      "Bash",
      "Manipulate files and permissions"
    ]
  },
  {
    "objectID": "Courses/Bash/handled_files.html#commands-documentation-important-for-your-autonomy",
    "href": "Courses/Bash/handled_files.html#commands-documentation-important-for-your-autonomy",
    "title": "Manipulate files and permissions",
    "section": "",
    "text": "In this short part, we explain how to use the manual to have all the ways to use a command.\nIf you want to know everything on a command (say mkdir), use:\n$ sudo man mkdir\nTo move on this page:\n\nEspace to go to the next page.\n/ to research a word in this documentation\nQ to quit the page.\n\nEach man usage displays the following sections:\n\nNAME and a short description\nSYNOPSIS lists all the ways to use the command.\nDESCRIPTION is a deeper description of the commands with all the options.\nAUTHOR of the program.\nREPORTING BUGS the people to contact for a bug.\nCOPYRIGHT user license.\nSEE ALSO others related commands.\n\nman is useful if you know the name of the command. Otherwhise, use apropos. For instance, if you look for a command related to the sound of your machine (gives all the command which talks about sound in their description):\n$ apropos sound",
    "crumbs": [
      "Bash",
      "Manipulate files and permissions"
    ]
  },
  {
    "objectID": "Courses/Bash/handled_files.html#looking-for-files",
    "href": "Courses/Bash/handled_files.html#looking-for-files",
    "title": "Manipulate files and permissions",
    "section": "",
    "text": "There is a lot of commands in this direction. The most popular and powerful command is find. It goes all over your hard drive. The command can use three kinds of arguments:\n\nwhere: it is the folder where we look for.\nwhat: it is the file we look for (by name, size, date,…).\naction: automatic actions on the selected files.\n\n\n\nFind a file by name in the current directory:\n$ find -name \"research.png\"\nIf you want to find the file called ‘research.png’ in the directory ‘folder’:\n$ find folder -name \"research.png\"\nResearch with the size:\n$ find ~ -size +10M\nResearch with the date of the last access (less than 7 days):\n$ find ~ -name \".odt\" -atime 6 \n\n\n\nYou can add an action to the result of the search. For instance, if you want to delete the results:\n$ find ~ -name \".odt\" -delete \nWith exec you can execute a command for all the files giving by find. Let’s say that you want to change the permissions of all the ‘.odt’ files:\n$ find ~ -name \".odt\" -exec chmod 640 {} \\; \nHow does it work? For each file found, the command after exec is executed. The curly brackets ‘{}’ will be replaced by the name of this file. The command must end with ‘;’.\nExercise: gather all your .jpeg files into a folder ‘images’.",
    "crumbs": [
      "Bash",
      "Manipulate files and permissions"
    ]
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Software Development for Data Science",
    "section": "",
    "text": "In this website, you can find ressources about:\n\nBash commands\na Git tutorial for colloborative code\nmethodology of Unit Test and Continuous Integration\nOriented Object Programmation in Python\nData Science usual libraries in Python (Numpy, Pandas, Scipy)\n\nThe grading project is also described with the evaluation criteria.\n\n\n\n Back to top"
  },
  {
    "objectID": "Courses/Bash/first_step.html",
    "href": "Courses/Bash/first_step.html",
    "title": "Some basics on Bash",
    "section": "",
    "text": "Open a Linux terminal (or a Git Bash for Windows) and type:\n$ ls\nAs we can see, “ls” lists files and folders which are in the directory where we are when we execute the command.\nLet’s type mkdir to create a new folder (in the same directory):\n$ mkdir testfolder\nI want now to enter in this folder (change directory)\n$ cd testfolder\nWe can check the complete directory with ‘pwd’ (print working directory):\n$ pwd\nThis folder is for now empty. Let’s create a file:\n$ touch testfile\nThe file is empty. To write in this file, we can use the ‘echo’ command (we will task later about the operator &gt;):\n$ echo \"hello world\" &gt; testfile\nLet’s visualize the content of this file:\n$ cat testfile\nLet’s try to add another content:\n$ echo \"new line\" &gt; testfile\nThe previous content has been suppressed. To add a content to a file, use ‘&gt;&gt;’:\n$ echo \"new line\" &gt;&gt; testfile\n\n\n\nMost of the commands accept parameters to specify their behaviors. We will illustrate this on two commands: ‘ls’ and ‘du’ (size of file).\n\n\n\n“-a” displays all the hidden files and folders\n\n$ ls -a\n\n‘-l’ gives details about each file.\n\n$ ls -l\nThe following information are provided: 1. File permission (later subject) 2. Number of physical links 3. Owner of the file 4. Group owner 5. Size of the file (octets) 6. Last update 7. Name - ‘h’ enables to have readeable size (K,Mo,…)\n$ ls -lh\n\n‘t’ arranges the files according to the date of the last change:\n\n$ ls -lt\n\n\n\nTo return to the parent folder:\n$ cd ..\nIf you want to return to the home folder:\n$ cd ~\n\n\n\n$ du\ngives the size of all the folders in the current directory.\n$ du -h\ngives readeable size (K,Mo,…).\n$ du -a\ngives the size of files and folders since ‘du’ only displays size of folders by default.\n$ du -s\ndisplays the size of the whole folder without detailing each sub-folder.\n\n\n\n\nVim is one of the text editor available in the terminal. We will see how to use it basically. To open vim on “testFile”:\n$ vim testFile\n\n\nVim has three different modes:\n\ninterractive mode where you cannot write in your file, but you can move, do copy past, cancel out your actions.\ninsertion mode where you can write your text, code. To activate this mode, use i. To escape this mode, use Echap.\ncommand mode where you can execute some commands: register, quit, activate some options like the numbering. To activate this mode, use : from the interractive mode.\n\n\n\n\nWe sum up some commands to move efficiently in the file and register your modifications:\n\n0 and $ enable to move at the beginning or the end of the file (interractive model).\n:w nameFile to save your file (insertion mode).\n:q to quit the file (insertion mode).\n:wq to save and quit the file (insertion mode).\n x to suppress a letter. (number) x to suppress a certain number of letters.\n(number)dd to suppress/cut a certain number of lines.\ndw to suppress a word.\nd0 or d$ to suppress the beginning or the end of the line.\nyy to copy a line.\n(number)p to paste.\nu to cancel the modifications.\n(n)G to move to the line n.\n:set number to activate the numbering.",
    "crumbs": [
      "Bash",
      "Some basics on Bash"
    ]
  },
  {
    "objectID": "Courses/Bash/first_step.html#survival-kit",
    "href": "Courses/Bash/first_step.html#survival-kit",
    "title": "Some basics on Bash",
    "section": "",
    "text": "Open a Linux terminal (or a Git Bash for Windows) and type:\n$ ls\nAs we can see, “ls” lists files and folders which are in the directory where we are when we execute the command.\nLet’s type mkdir to create a new folder (in the same directory):\n$ mkdir testfolder\nI want now to enter in this folder (change directory)\n$ cd testfolder\nWe can check the complete directory with ‘pwd’ (print working directory):\n$ pwd\nThis folder is for now empty. Let’s create a file:\n$ touch testfile\nThe file is empty. To write in this file, we can use the ‘echo’ command (we will task later about the operator &gt;):\n$ echo \"hello world\" &gt; testfile\nLet’s visualize the content of this file:\n$ cat testfile\nLet’s try to add another content:\n$ echo \"new line\" &gt; testfile\nThe previous content has been suppressed. To add a content to a file, use ‘&gt;&gt;’:\n$ echo \"new line\" &gt;&gt; testfile",
    "crumbs": [
      "Bash",
      "Some basics on Bash"
    ]
  },
  {
    "objectID": "Courses/Bash/first_step.html#parameters-for-commands",
    "href": "Courses/Bash/first_step.html#parameters-for-commands",
    "title": "Some basics on Bash",
    "section": "",
    "text": "Most of the commands accept parameters to specify their behaviors. We will illustrate this on two commands: ‘ls’ and ‘du’ (size of file).\n\n\n\n“-a” displays all the hidden files and folders\n\n$ ls -a\n\n‘-l’ gives details about each file.\n\n$ ls -l\nThe following information are provided: 1. File permission (later subject) 2. Number of physical links 3. Owner of the file 4. Group owner 5. Size of the file (octets) 6. Last update 7. Name - ‘h’ enables to have readeable size (K,Mo,…)\n$ ls -lh\n\n‘t’ arranges the files according to the date of the last change:\n\n$ ls -lt\n\n\n\nTo return to the parent folder:\n$ cd ..\nIf you want to return to the home folder:\n$ cd ~\n\n\n\n$ du\ngives the size of all the folders in the current directory.\n$ du -h\ngives readeable size (K,Mo,…).\n$ du -a\ngives the size of files and folders since ‘du’ only displays size of folders by default.\n$ du -s\ndisplays the size of the whole folder without detailing each sub-folder.",
    "crumbs": [
      "Bash",
      "Some basics on Bash"
    ]
  },
  {
    "objectID": "Courses/Bash/first_step.html#introduction-to-vim",
    "href": "Courses/Bash/first_step.html#introduction-to-vim",
    "title": "Some basics on Bash",
    "section": "",
    "text": "Vim is one of the text editor available in the terminal. We will see how to use it basically. To open vim on “testFile”:\n$ vim testFile\n\n\nVim has three different modes:\n\ninterractive mode where you cannot write in your file, but you can move, do copy past, cancel out your actions.\ninsertion mode where you can write your text, code. To activate this mode, use i. To escape this mode, use Echap.\ncommand mode where you can execute some commands: register, quit, activate some options like the numbering. To activate this mode, use : from the interractive mode.\n\n\n\n\nWe sum up some commands to move efficiently in the file and register your modifications:\n\n0 and $ enable to move at the beginning or the end of the file (interractive model).\n:w nameFile to save your file (insertion mode).\n:q to quit the file (insertion mode).\n:wq to save and quit the file (insertion mode).\n x to suppress a letter. (number) x to suppress a certain number of letters.\n(number)dd to suppress/cut a certain number of lines.\ndw to suppress a word.\nd0 or d$ to suppress the beginning or the end of the line.\nyy to copy a line.\n(number)p to paste.\nu to cancel the modifications.\n(n)G to move to the line n.\n:set number to activate the numbering.",
    "crumbs": [
      "Bash",
      "Some basics on Bash"
    ]
  },
  {
    "objectID": "Courses/Bash/streams_research.html",
    "href": "Courses/Bash/streams_research.html",
    "title": "Extract, sort and filter data",
    "section": "",
    "text": "The role of grep is to look for a word in a text and to display the lines where it appears.\n\n\nIf you want to look for the word “alias” in the file “.bashrc”, type:\n$ grep alias .bashrc\nIf you want to ignore the difference between non-capital letters and capital letters, use the option “i”:\n$ grep -i alias .bashrc\nTo display the line numbers, use option “-n”:\n$ grep -n alias .bashrc\nIf you want to display all the lines where a word is not present, use ‘-v’:\n$ grep -v alias .bashrc\nFinally, to do a recursive research in a folder, use ‘-r’:\n$ grep -r alias folderName\n\n\n\nTo do some accurate researches, you need to use regex: it is a set of symbols that tell to the computer exactly what you look for. The following table gives the main symbols and their meaning:\n\n\n\nSymbols\nMeaning\n\n\n\n\n.\nAny character except \n\n\n^\nAt the beginning\n\n\n$\nAt the end\n\n\n[]\nOne character between the bracket\n\n\n[^]\nForbidden characters\n\n\n?\nOptional character (apply to the previoous one)\n\n\n*\nThe previous character may be present 0,1, or many times\n\n\n+\nThe previous character must be present 1 or many times\n\n\n|\nOr\n\n\n()\nGroup of expressions\n\n\n{n}\nThe previous character is present n times\n\n\n\nLet’s give some examples to illustrate this abstract table: first use option “-E” to indicate that you use regex.\n$ grep -E ^Alias .bashrc\nmeans that you look for lines that begin with ‘Alias’.\n$ grep -E [Aa]lias .bashrc\nmeans that you look for “Alias” or “alias”.\n$ grep -E [0-4] .bashrc\ngives all the lines that contain a number between 0 and 4.\nExercise (intermediary). Write the following regexs:\n\nlines that contain two or too\nlines that contain copyright or right\nlines that contain 3 vowels\n\nExercise (difficult). Write the following regexs:\n\nWrite a regexp that validates if an email adress is correct or not.\nWrite a regexp that captures phone numbers with the format (xxx) xxx-xxxx or xxx-xxx-xxxx.\n\n\n\n\n\nThe command sort sorts by alphabetical order:\n$ sort testFile\nThe result is only displayed on the terminal. To write the result on a file, use option “-o”:\n$ sort -o sortFile fileTest\nTo sort numbers use option ‘-n’.\n\n\n\nTo count the number of lines, use ‘l’:\n$ wc -l testFile\nFor the number of words, use ‘-w’:\n$ wc -w testFile\nFor the number of characters, use ‘-m’:\n$ wc -m testFile\n\n\n\nThe command cut enables to preserve only a part of each line. Let’s say that we have already a file marks.csv with a column of name, marks and appreciations. Basically, you can cut according to the number of characters. If you want to preserve only the characters from 2 to 4, type:\n$ cut -c 2-4 marks.csv\nBut if you want to extract only the names, you can not do this if all the names have not the same length. We use the fact that the file is a csv (Comma separated value) that is to say each column is separeted by a comma. The following command does exactly what you want:\n$ cut -d , -f 1 marks.csv\nLet’s detail the options:\n\n‘-d’ indicates the delimiter (here the comma)\n‘-f’ indicates the column to preservex\n\n\n\n\nFor each command we have seen earlier, the result is displayed on the terminal. But you can send the result to another output: in a file or as the input of another command (command pipeline). This is performed using special symbols like ‘&gt;’, ‘&gt;&gt;’ or ‘|’.\n\n\nThese symbols enable to write the result of a command in a file, instead of the terminal.\nLet’s first begin with &gt;. Let’s illustrate with the file “marks.csv” and we write the result of cut in another file.\n$ cut -d , -f 1 marks.csv &gt; names.txt\n&gt;&gt; redirects at the end of the file (so your file is not cleaned):\n$ cut -d , -f 1 marks.csv &gt;&gt; names.txt\nReally, each command produce two streams: the standard output (with everything except the error) and the error output. Imagine that you try to cut a file that does not exist:\n$ cut -d , -f 1 fileNotExist.csv &gt; names.txt\nThe error message appears in the terminal. To redirect this message, use 2&gt;:\n$ cut -d , -f 1 fileNotExist.csv &gt; names.txt 2&gt; errors.log\nIf you want to merge the two outputs, it is possible with:\n$ cut -d , -f 1 fileNotExist.csv &gt; names.txt 2&gt;&1 errors.log\n\n\n\nLet’s chain up commands with the pipe | symbol. This means that the output of a previous command is the entrance of the new command:\n\n\n\nPipeline\n\n\nLet’s say that you want to sort the names of the file “marks.csv”, you can combine cut with sort and write the result in the file “sortNames.txt”:\n$ cut -d , -f 1 marks.csv | sort &gt; sortNames.txt\nIf you want to know all the folders sorted by their size and display only the most voluminuous:\n$ du | sort -nr | head\nExercise: display only the names of the file containing the word “log” in the folder “/var/log”, sort these names and eliminate the duplicates.",
    "crumbs": [
      "Bash",
      "Extract, sort and filter data"
    ]
  },
  {
    "objectID": "Courses/Bash/streams_research.html#filter-with-grep",
    "href": "Courses/Bash/streams_research.html#filter-with-grep",
    "title": "Extract, sort and filter data",
    "section": "",
    "text": "The role of grep is to look for a word in a text and to display the lines where it appears.\n\n\nIf you want to look for the word “alias” in the file “.bashrc”, type:\n$ grep alias .bashrc\nIf you want to ignore the difference between non-capital letters and capital letters, use the option “i”:\n$ grep -i alias .bashrc\nTo display the line numbers, use option “-n”:\n$ grep -n alias .bashrc\nIf you want to display all the lines where a word is not present, use ‘-v’:\n$ grep -v alias .bashrc\nFinally, to do a recursive research in a folder, use ‘-r’:\n$ grep -r alias folderName\n\n\n\nTo do some accurate researches, you need to use regex: it is a set of symbols that tell to the computer exactly what you look for. The following table gives the main symbols and their meaning:\n\n\n\nSymbols\nMeaning\n\n\n\n\n.\nAny character except \n\n\n^\nAt the beginning\n\n\n$\nAt the end\n\n\n[]\nOne character between the bracket\n\n\n[^]\nForbidden characters\n\n\n?\nOptional character (apply to the previoous one)\n\n\n*\nThe previous character may be present 0,1, or many times\n\n\n+\nThe previous character must be present 1 or many times\n\n\n|\nOr\n\n\n()\nGroup of expressions\n\n\n{n}\nThe previous character is present n times\n\n\n\nLet’s give some examples to illustrate this abstract table: first use option “-E” to indicate that you use regex.\n$ grep -E ^Alias .bashrc\nmeans that you look for lines that begin with ‘Alias’.\n$ grep -E [Aa]lias .bashrc\nmeans that you look for “Alias” or “alias”.\n$ grep -E [0-4] .bashrc\ngives all the lines that contain a number between 0 and 4.\nExercise (intermediary). Write the following regexs:\n\nlines that contain two or too\nlines that contain copyright or right\nlines that contain 3 vowels\n\nExercise (difficult). Write the following regexs:\n\nWrite a regexp that validates if an email adress is correct or not.\nWrite a regexp that captures phone numbers with the format (xxx) xxx-xxxx or xxx-xxx-xxxx.",
    "crumbs": [
      "Bash",
      "Extract, sort and filter data"
    ]
  },
  {
    "objectID": "Courses/Bash/streams_research.html#sort-the-files",
    "href": "Courses/Bash/streams_research.html#sort-the-files",
    "title": "Extract, sort and filter data",
    "section": "",
    "text": "The command sort sorts by alphabetical order:\n$ sort testFile\nThe result is only displayed on the terminal. To write the result on a file, use option “-o”:\n$ sort -o sortFile fileTest\nTo sort numbers use option ‘-n’.",
    "crumbs": [
      "Bash",
      "Extract, sort and filter data"
    ]
  },
  {
    "objectID": "Courses/Bash/streams_research.html#count-line-numbers-with-wc",
    "href": "Courses/Bash/streams_research.html#count-line-numbers-with-wc",
    "title": "Extract, sort and filter data",
    "section": "",
    "text": "To count the number of lines, use ‘l’:\n$ wc -l testFile\nFor the number of words, use ‘-w’:\n$ wc -w testFile\nFor the number of characters, use ‘-m’:\n$ wc -m testFile",
    "crumbs": [
      "Bash",
      "Extract, sort and filter data"
    ]
  },
  {
    "objectID": "Courses/Bash/streams_research.html#cut-a-part-of-a-file-cut",
    "href": "Courses/Bash/streams_research.html#cut-a-part-of-a-file-cut",
    "title": "Extract, sort and filter data",
    "section": "",
    "text": "The command cut enables to preserve only a part of each line. Let’s say that we have already a file marks.csv with a column of name, marks and appreciations. Basically, you can cut according to the number of characters. If you want to preserve only the characters from 2 to 4, type:\n$ cut -c 2-4 marks.csv\nBut if you want to extract only the names, you can not do this if all the names have not the same length. We use the fact that the file is a csv (Comma separated value) that is to say each column is separeted by a comma. The following command does exactly what you want:\n$ cut -d , -f 1 marks.csv\nLet’s detail the options:\n\n‘-d’ indicates the delimiter (here the comma)\n‘-f’ indicates the column to preservex",
    "crumbs": [
      "Bash",
      "Extract, sort and filter data"
    ]
  },
  {
    "objectID": "Courses/Bash/streams_research.html#streams-important",
    "href": "Courses/Bash/streams_research.html#streams-important",
    "title": "Extract, sort and filter data",
    "section": "",
    "text": "For each command we have seen earlier, the result is displayed on the terminal. But you can send the result to another output: in a file or as the input of another command (command pipeline). This is performed using special symbols like ‘&gt;’, ‘&gt;&gt;’ or ‘|’.\n\n\nThese symbols enable to write the result of a command in a file, instead of the terminal.\nLet’s first begin with &gt;. Let’s illustrate with the file “marks.csv” and we write the result of cut in another file.\n$ cut -d , -f 1 marks.csv &gt; names.txt\n&gt;&gt; redirects at the end of the file (so your file is not cleaned):\n$ cut -d , -f 1 marks.csv &gt;&gt; names.txt\nReally, each command produce two streams: the standard output (with everything except the error) and the error output. Imagine that you try to cut a file that does not exist:\n$ cut -d , -f 1 fileNotExist.csv &gt; names.txt\nThe error message appears in the terminal. To redirect this message, use 2&gt;:\n$ cut -d , -f 1 fileNotExist.csv &gt; names.txt 2&gt; errors.log\nIf you want to merge the two outputs, it is possible with:\n$ cut -d , -f 1 fileNotExist.csv &gt; names.txt 2&gt;&1 errors.log\n\n\n\nLet’s chain up commands with the pipe | symbol. This means that the output of a previous command is the entrance of the new command:\n\n\n\nPipeline\n\n\nLet’s say that you want to sort the names of the file “marks.csv”, you can combine cut with sort and write the result in the file “sortNames.txt”:\n$ cut -d , -f 1 marks.csv | sort &gt; sortNames.txt\nIf you want to know all the folders sorted by their size and display only the most voluminuous:\n$ du | sort -nr | head\nExercise: display only the names of the file containing the word “log” in the folder “/var/log”, sort these names and eliminate the duplicates.",
    "crumbs": [
      "Bash",
      "Extract, sort and filter data"
    ]
  },
  {
    "objectID": "Courses/Git/Basis_PartII.html",
    "href": "Courses/Git/Basis_PartII.html",
    "title": "Basic commands: remote repo",
    "section": "",
    "text": "In this part, we will work on a real remote repository but without collaborators (next part). In this perspective, create an account on Github .\n\n\nClick on “new” or “create repository”. You need to fill in the following information:\n\nprovide a repository name and a description\nyou have to choose between public or private (choose private for now)\nchoose to add a “Readme” file (you see what it is)\nchoose to add a “gitignore”\n\n\n\n\nThe readme file is used for the documentation of your project. It is often written in markdown. You can find in this file:\n\na table of content\nthe goals of the project\ninstruction to install the project (clone is not sufficient and you need for example some python environment and packages)\nhow to use it\na documentation of the different functionalities of your code, …\n\n\n\n\nThere is nothing on your repository. You want to copy your repository on your computer, code and send your work inline. Remark: another possibility is to initiate a repository on your computer and send it to Github. But we will proceed more often like described previously.\nTo clone your repository, click on Code and then `SSH. Github tells you that you do not have a public key. Let’s create one.\n\n\nClick on the link in Code-&gt; SSH or [this one] (https://github.com/settings/ssh/new). We first generate a key using your Github email adress:\n$ ssh-keygen -t ed25519 -C \"your_email@example.com\"\nThe terminal suggests to enter the file name where you store the key. By default, it will be in the folder home, in a hidden folder “.ssh” and in the file “id_ed25519”. If you have already a ssh key, the terminal tells you so. Github asks you a passphrase: it is not mandatory.\nNow, you have generated public and private keys. You will add them to the ssh-agent: it is a program that keeps into memory your keys. You add the previous to this agent:\n$ eval \"$(ssh-agent -s)\"\n$ ssh-add ~/.ssh/id_ed25519 # le chemin vers votre clé privée générée plus haut\nTo know your ssh key, type:\n$ cat ~/.ssh/id_ed25519.pub\nCopy and paste this key to your github account: Settings -&gt; SSH and GPG keys -&gt; new SSH key.\nNow, you can finally clone your remote repository:\n$ git clone copied_adress\n\n\n\n\nWe will just repeat the same steps as in the offline part. Let’s create a new script:\n$ echo “recall: 60%” &gt;&gt; new_script.py\nAdd it to the index:\n$ git add new_script.py\nCommit the modifications:\n$ git commit -m \"message de commit\"\nPush everything on your remote repo:\n$ git push",
    "crumbs": [
      "Git",
      "Basic commands: remote repo"
    ]
  },
  {
    "objectID": "Courses/Git/Basis_PartII.html#create-a-repository",
    "href": "Courses/Git/Basis_PartII.html#create-a-repository",
    "title": "Basic commands: remote repo",
    "section": "",
    "text": "Click on “new” or “create repository”. You need to fill in the following information:\n\nprovide a repository name and a description\nyou have to choose between public or private (choose private for now)\nchoose to add a “Readme” file (you see what it is)\nchoose to add a “gitignore”",
    "crumbs": [
      "Git",
      "Basic commands: remote repo"
    ]
  },
  {
    "objectID": "Courses/Git/Basis_PartII.html#readme",
    "href": "Courses/Git/Basis_PartII.html#readme",
    "title": "Basic commands: remote repo",
    "section": "",
    "text": "The readme file is used for the documentation of your project. It is often written in markdown. You can find in this file:\n\na table of content\nthe goals of the project\ninstruction to install the project (clone is not sufficient and you need for example some python environment and packages)\nhow to use it\na documentation of the different functionalities of your code, …",
    "crumbs": [
      "Git",
      "Basic commands: remote repo"
    ]
  },
  {
    "objectID": "Courses/Git/Basis_PartII.html#ssh-and-clone-of-your-repository-important",
    "href": "Courses/Git/Basis_PartII.html#ssh-and-clone-of-your-repository-important",
    "title": "Basic commands: remote repo",
    "section": "",
    "text": "There is nothing on your repository. You want to copy your repository on your computer, code and send your work inline. Remark: another possibility is to initiate a repository on your computer and send it to Github. But we will proceed more often like described previously.\nTo clone your repository, click on Code and then `SSH. Github tells you that you do not have a public key. Let’s create one.\n\n\nClick on the link in Code-&gt; SSH or [this one] (https://github.com/settings/ssh/new). We first generate a key using your Github email adress:\n$ ssh-keygen -t ed25519 -C \"your_email@example.com\"\nThe terminal suggests to enter the file name where you store the key. By default, it will be in the folder home, in a hidden folder “.ssh” and in the file “id_ed25519”. If you have already a ssh key, the terminal tells you so. Github asks you a passphrase: it is not mandatory.\nNow, you have generated public and private keys. You will add them to the ssh-agent: it is a program that keeps into memory your keys. You add the previous to this agent:\n$ eval \"$(ssh-agent -s)\"\n$ ssh-add ~/.ssh/id_ed25519 # le chemin vers votre clé privée générée plus haut\nTo know your ssh key, type:\n$ cat ~/.ssh/id_ed25519.pub\nCopy and paste this key to your github account: Settings -&gt; SSH and GPG keys -&gt; new SSH key.\nNow, you can finally clone your remote repository:\n$ git clone copied_adress",
    "crumbs": [
      "Git",
      "Basic commands: remote repo"
    ]
  },
  {
    "objectID": "Courses/Git/Basis_PartII.html#commit-pull-push-on-the-remote-repository",
    "href": "Courses/Git/Basis_PartII.html#commit-pull-push-on-the-remote-repository",
    "title": "Basic commands: remote repo",
    "section": "",
    "text": "We will just repeat the same steps as in the offline part. Let’s create a new script:\n$ echo “recall: 60%” &gt;&gt; new_script.py\nAdd it to the index:\n$ git add new_script.py\nCommit the modifications:\n$ git commit -m \"message de commit\"\nPush everything on your remote repo:\n$ git push",
    "crumbs": [
      "Git",
      "Basic commands: remote repo"
    ]
  },
  {
    "objectID": "Courses/Git/Collaborative_PartII.html",
    "href": "Courses/Git/Collaborative_PartII.html",
    "title": "Collaborative Git (PartII)",
    "section": "",
    "text": "In this part, you will learn basically how to handle conflicts.\n\n\nLet’s imagine you have added some new functionalities to your preprocessing code (branch preprocess_test):\n$ echo \"one-hot encoding\" &gt;&gt; preprocessing_test.py\nAdd it to the index and commit it.\nWhile you have added this preprocess, your colleague has focused on a new method to optimize the model:\n$ cd ../colleague_computer\n$ git checkout -b new_opti__model\nHe/she changes the script as follows:\n$ echo \"new opti method: 90% Accuracy\" &gt;&gt; first_model.py\n$ git commit -am \"new opti method\"\n$ git push\nThis creates a PR and you accept the merge pull request.\nAfter that, you continue your work on preprocessing:\n$ cd ../mycomputer\n$ echo \"improve encoding\" &gt;&gt; preprocessing_test.py\n$ git commit -am \"improve encoding\"\n$ git push \nBut you do not have the last code of your colleague (you do not have pull the main branch) and you may think that you overwrite his/her file. This is wrong since you require Git to merge the “commits”: you have not modified/committed the file “first_model.py”. So you can create a PR and merge it. In this situation, no conflict exists. Let’s explore a conflictual situation where you and your colleague modify the same file.\n\n\n\nYou come the morning to work and retrieve the last modifications on the main branch (as well as your colleague). Create a new branch and modify “first_model.py”. During this time, your colleague modify the file “first_model.py” (a different one): add, commit, push, PR. Validate the modifications of your colleague and finish your own (add, commit, push, PR). After Pull Request, the following message appears: “this branch has conflicts that must be resolved”.\n\n\n\n\n\nClick on resolve conflicts. You will see the modifications brought by your branch and the other changes. Once you have solved the conflicts, click on mark as resolved.\n\n\n\nWhen you merge the files, Git indicates the presence of a conflict. Three possibilities exist:\n\nopen the file locally and solve the conflict.\npreserve the local modifications with git checkout --ours file\noverwrite the local modifications and preserve the remote ones with git checkout --theirs file\n\n\n\n\n\nYou have created a branch “Branch1” but during this time that main branch has been updated (let’s say the correction of a major bug). You have two possibilies:\n\non the branch “Branch1”, you merge the main branch. The drawback of this strategy is to create a complex historic.\nwith the command git rebase you overwrite the historic. Let’s illustrate this command.\n\nCreate a new branch “Branch1” and a new file “branch1_file.txt” and commit it. Return on the main branch, create a new file and commit it. Return on the branch “Branch1” and type:\n$ git rebase main\nThis indicates that the last commit of main becomes the parent of the branch “Branch1”.\nWarning: Do not rebase a public branch!",
    "crumbs": [
      "Git",
      "Collaborative Git (PartII)"
    ]
  },
  {
    "objectID": "Courses/Git/Collaborative_PartII.html#conflict-or-not",
    "href": "Courses/Git/Collaborative_PartII.html#conflict-or-not",
    "title": "Collaborative Git (PartII)",
    "section": "",
    "text": "Let’s imagine you have added some new functionalities to your preprocessing code (branch preprocess_test):\n$ echo \"one-hot encoding\" &gt;&gt; preprocessing_test.py\nAdd it to the index and commit it.\nWhile you have added this preprocess, your colleague has focused on a new method to optimize the model:\n$ cd ../colleague_computer\n$ git checkout -b new_opti__model\nHe/she changes the script as follows:\n$ echo \"new opti method: 90% Accuracy\" &gt;&gt; first_model.py\n$ git commit -am \"new opti method\"\n$ git push\nThis creates a PR and you accept the merge pull request.\nAfter that, you continue your work on preprocessing:\n$ cd ../mycomputer\n$ echo \"improve encoding\" &gt;&gt; preprocessing_test.py\n$ git commit -am \"improve encoding\"\n$ git push \nBut you do not have the last code of your colleague (you do not have pull the main branch) and you may think that you overwrite his/her file. This is wrong since you require Git to merge the “commits”: you have not modified/committed the file “first_model.py”. So you can create a PR and merge it. In this situation, no conflict exists. Let’s explore a conflictual situation where you and your colleague modify the same file.",
    "crumbs": [
      "Git",
      "Collaborative Git (PartII)"
    ]
  },
  {
    "objectID": "Courses/Git/Collaborative_PartII.html#real-conflict",
    "href": "Courses/Git/Collaborative_PartII.html#real-conflict",
    "title": "Collaborative Git (PartII)",
    "section": "",
    "text": "You come the morning to work and retrieve the last modifications on the main branch (as well as your colleague). Create a new branch and modify “first_model.py”. During this time, your colleague modify the file “first_model.py” (a different one): add, commit, push, PR. Validate the modifications of your colleague and finish your own (add, commit, push, PR). After Pull Request, the following message appears: “this branch has conflicts that must be resolved”.",
    "crumbs": [
      "Git",
      "Collaborative Git (PartII)"
    ]
  },
  {
    "objectID": "Courses/Git/Collaborative_PartII.html#handle-conflict",
    "href": "Courses/Git/Collaborative_PartII.html#handle-conflict",
    "title": "Collaborative Git (PartII)",
    "section": "",
    "text": "Click on resolve conflicts. You will see the modifications brought by your branch and the other changes. Once you have solved the conflicts, click on mark as resolved.\n\n\n\nWhen you merge the files, Git indicates the presence of a conflict. Three possibilities exist:\n\nopen the file locally and solve the conflict.\npreserve the local modifications with git checkout --ours file\noverwrite the local modifications and preserve the remote ones with git checkout --theirs file",
    "crumbs": [
      "Git",
      "Collaborative Git (PartII)"
    ]
  },
  {
    "objectID": "Courses/Git/Collaborative_PartII.html#modification-of-the-historic-with-git-rebase",
    "href": "Courses/Git/Collaborative_PartII.html#modification-of-the-historic-with-git-rebase",
    "title": "Collaborative Git (PartII)",
    "section": "",
    "text": "You have created a branch “Branch1” but during this time that main branch has been updated (let’s say the correction of a major bug). You have two possibilies:\n\non the branch “Branch1”, you merge the main branch. The drawback of this strategy is to create a complex historic.\nwith the command git rebase you overwrite the historic. Let’s illustrate this command.\n\nCreate a new branch “Branch1” and a new file “branch1_file.txt” and commit it. Return on the main branch, create a new file and commit it. Return on the branch “Branch1” and type:\n$ git rebase main\nThis indicates that the last commit of main becomes the parent of the branch “Branch1”.\nWarning: Do not rebase a public branch!",
    "crumbs": [
      "Git",
      "Collaborative Git (PartII)"
    ]
  },
  {
    "objectID": "Courses/Git/Workflow.html",
    "href": "Courses/Git/Workflow.html",
    "title": "Workflows",
    "section": "",
    "text": "This part is not complete but for now, it gives some notions of a workflow.\n\n\nThe different collaborators can have different git using habits. A workflow is a set of recommandations to follow in order to use Git efficiently. In other words, it is a set of guidelines for all the collaborators.\nA basic worflow is the Feature Branch Workflow: a branch is created for each functionality and once implemented, it is merged with the main branch. GitFlow is an extension of this workflow.\n\n\n\n\n\nGitFlow is based on the Feature Branch Workflow (one branch=one functionality/feature) but it adds:\n\na branch called develop which integrates the feature branches\ndifferent release branches that gather a set of features that are considered as finished\nmain branch that contains only code coming from release branches\nhotfix branches to solve bugs coming from the main branch\n\n\n\n\nGitFlow organization\n\n\n\n\n\nThere is a GitFlow plug-in to make easier the use of this workflow:\n\ngit flow init initiates the project, create the main branch and the branch develop\ngit flow feature start namefeature creates a new branch from the branch develop.\ngit flow feature finish namefeature merges the feature branch with the develop one.\ngit flow release start 0.0.1 creates the release and git flow release finish 0.0.1 integrates the feature to the main branch.",
    "crumbs": [
      "Git",
      "Workflows"
    ]
  },
  {
    "objectID": "Courses/Git/Workflow.html#what-is-a-workflow",
    "href": "Courses/Git/Workflow.html#what-is-a-workflow",
    "title": "Workflows",
    "section": "",
    "text": "The different collaborators can have different git using habits. A workflow is a set of recommandations to follow in order to use Git efficiently. In other words, it is a set of guidelines for all the collaborators.\nA basic worflow is the Feature Branch Workflow: a branch is created for each functionality and once implemented, it is merged with the main branch. GitFlow is an extension of this workflow.",
    "crumbs": [
      "Git",
      "Workflows"
    ]
  },
  {
    "objectID": "Courses/Git/Workflow.html#gitflow",
    "href": "Courses/Git/Workflow.html#gitflow",
    "title": "Workflows",
    "section": "",
    "text": "GitFlow is based on the Feature Branch Workflow (one branch=one functionality/feature) but it adds:\n\na branch called develop which integrates the feature branches\ndifferent release branches that gather a set of features that are considered as finished\nmain branch that contains only code coming from release branches\nhotfix branches to solve bugs coming from the main branch\n\n\n\n\nGitFlow organization\n\n\n\n\n\nThere is a GitFlow plug-in to make easier the use of this workflow:\n\ngit flow init initiates the project, create the main branch and the branch develop\ngit flow feature start namefeature creates a new branch from the branch develop.\ngit flow feature finish namefeature merges the feature branch with the develop one.\ngit flow release start 0.0.1 creates the release and git flow release finish 0.0.1 integrates the feature to the main branch.",
    "crumbs": [
      "Git",
      "Workflows"
    ]
  },
  {
    "objectID": "Courses/Test_Python/TimeMemory.html",
    "href": "Courses/Test_Python/TimeMemory.html",
    "title": "Sparse matrices, graphs and maps",
    "section": "",
    "text": "Sparse matrices are useful to handle potentially huge matrices with structures. The most standard structure is sparsity, i.e., matrices that have only a few non-zero coefficients.\nThe most common formats are\n\nCOO_matrix(arg1[, shape, dtype, copy]): A sparse matrix in COOrdinate format.\ncsr_matrix(arg1[, shape, dtype, copy]): Compressed Sparse Row matrix (default format in scipy)\ncsc_matrix(arg1[, shape, dtype, copy]): Compressed Sparse Column matrix\n\nBelow are examples of common scenarios where sparse matrices are often used:\n\n\nA matrix might encode the presence/absence in a text of a word from a dictionary (say the set of French words). The number 0 (resp. 1) represents the presence (resp. absence) of a word in a text.\n\n\n\nTo handle categorical data encoding as strings, many algorithms require that you first transform such variables as numerical vectors. The simplest protocol is to create one column to represent each modality of the categorical variable and to set the value to 1 if the observation is of that modality, and 0 otherwise. This is called one-hot encoding or dummy encoding. By construction, this can be encoded into a sparse (binary) matrix.\nAn example with pandas and sklearn is given below (recall that 0 represents False and 1 represents True):\n\nimport os\nimport pandas as pd\nimport pooch  # download data / avoid re-downloading\nfrom sklearn import datasets\nfrom sklearn.preprocessing import OneHotEncoder\nfrom sklearn.compose import make_column_transformer\n\nurl = \"http://josephsalmon.eu/enseignement/datasets/titanic.csv\"\npath_target = \"./titanic.csv\"\npath, fname = os.path.split(path_target)\npooch.retrieve(url, path=path, fname=fname, known_hash=None)\n\ncategorical_column = ['Embarked']\ndf_titanic_raw = pd.read_csv(\"titanic.csv\", usecols=categorical_column)\nprint(df_titanic_raw.info())\nprint(df_titanic_raw.head())\n\n&lt;class 'pandas.core.frame.DataFrame'&gt;\nRangeIndex: 891 entries, 0 to 890\nData columns (total 1 columns):\n #   Column    Non-Null Count  Dtype \n---  ------    --------------  ----- \n 0   Embarked  889 non-null    object\ndtypes: object(1)\nmemory usage: 7.1+ KB\nNone\n  Embarked\n0        S\n1        C\n2        S\n3        S\n4        S\n\n\npandas approach with get_dummies:\n\ndummies = pd.get_dummies(df_titanic_raw.Embarked, sparse=True)\ndummies.info()\n\n&lt;class 'pandas.core.frame.DataFrame'&gt;\nRangeIndex: 891 entries, 0 to 890\nData columns (total 3 columns):\n #   Column  Non-Null Count  Dtype              \n---  ------  --------------  -----              \n 0   C       1 non-null      Sparse[bool, False]\n 1   Q       1 non-null      Sparse[bool, False]\n 2   S       1 non-null      Sparse[bool, False]\ndtypes: Sparse[bool, False](3)\nmemory usage: 4.5 KB\n\n\nsklearn approach with OneHotEncoder:\n\ntransformer=make_column_transformer((OneHotEncoder(), ['Embarked']), remainder=\"passthrough\")\nmatrix_embarked = transformer.fit_transform(df_titanic_raw)\nprint(matrix_embarked)\nprint(type(matrix_embarked))\n\n\n\n\n  (0, 2)    1.0\n  (1, 0)    1.0\n  (2, 2)    1.0\n  (3, 2)    1.0\n  (4, 2)    1.0\n  (5, 1)    1.0\n  (6, 2)    1.0\n  (7, 2)    1.0\n  (8, 2)    1.0\n  (9, 0)    1.0\n  (10, 2)   1.0\n  (11, 2)   1.0\n  (12, 2)   1.0\n  (13, 2)   1.0\n  (14, 2)   1.0\n  (15, 2)   1.0\n  (16, 1)   1.0\n  (17, 2)   1.0\n  (18, 2)   1.0\n  (19, 0)   1.0\n  (20, 2)   1.0\n  (21, 2)   1.0\n  (22, 1)   1.0\n  (23, 2)   1.0\n  (24, 2)   1.0\n  : :\n  (866, 0)  1.0\n  (867, 2)  1.0\n  (868, 2)  1.0\n  (869, 2)  1.0\n  (870, 2)  1.0\n  (871, 2)  1.0\n  (872, 2)  1.0\n  (873, 2)  1.0\n  (874, 0)  1.0\n  (875, 0)  1.0\n  (876, 2)  1.0\n  (877, 2)  1.0\n  (878, 2)  1.0\n  (879, 0)  1.0\n  (880, 2)  1.0\n  (881, 2)  1.0\n  (882, 2)  1.0\n  (883, 2)  1.0\n  (884, 2)  1.0\n  (885, 1)  1.0\n  (886, 2)  1.0\n  (887, 2)  1.0\n  (888, 2)  1.0\n  (889, 0)  1.0\n  (890, 1)  1.0\n&lt;class 'scipy.sparse._csr.csr_matrix'&gt;\n\n\n\n\n\n\n\n\n\nNote\n\n\n\nThe differences between the two approaches are: - the encoding of absence/presence (True/False vs. 0/1) - the output created handles missing values differently by default\n\n\n\n\n\nFor instance, when very distant particles/objects have little influence, their value can be set to zero when representing physical quantities (e.g., heat diffusion, fluid mechanics, electro/magnetism, etc.)\n\n\n\nGraphs are naturally represented by adjacency or incidence matrices (cf. below), and therefore beyond the graphs, maps! We illustrate that in the last section of the course.\nReferences:\n\nScipy Lectures: why sparse matrices\nSparse data structures in Python, by Artem Golubin\nIntroduction to Sparse Matrices in Python with SciPy, by cmdlinetips\nScipy doc on sparse matrices\n\n\n\n\n\nfrom scipy import sparse\nfrom scipy.sparse import isspmatrix\n\nId = sparse.eye(3)\nprint(Id.toarray())\nprint(f'Q: Is the matrix Id is sparse?\\nA: {isspmatrix(Id)}')\n\nn1 = 9\nn2 = 9\nmat_rnd = sparse.rand(n1, n2, density=0.25, format=\"csr\",\n                      random_state=42)\nprint(mat_rnd.toarray())\nprint(f'Q: Is the matrix mat_rnd sparse?\\nA: {isspmatrix(mat_rnd)}')\n\n[[1. 0. 0.]\n [0. 1. 0.]\n [0. 0. 1.]]\nQ: Is the matrix Id is sparse?\nA: True\n[[0.54269608 0.         0.07455064 0.         0.         0.11586906\n  0.         0.         0.        ]\n [0.         0.77224477 0.         0.98688694 0.         0.\n  0.33089802 0.         0.86310343]\n [0.         0.         0.         0.         0.         0.\n  0.         0.         0.        ]\n [0.         0.81546143 0.         0.28093451 0.         0.\n  0.         0.         0.        ]\n [0.00552212 0.         0.14092422 0.80219698 0.06355835 0.70685734\n  0.         0.77127035 0.        ]\n [0.         0.         0.         0.         0.         0.\n  0.         0.35846573 0.        ]\n [0.         0.         0.         0.72900717 0.         0.\n  0.         0.         0.        ]\n [0.         0.         0.         0.         0.         0.\n  0.62329813 0.19871568 0.        ]\n [0.         0.         0.         0.07404465 0.         0.\n  0.         0.         0.        ]]\nQ: Is the matrix mat_rnd sparse?\nA: True\n\n\nA matrix-vector product can be performed as usual, with the @ operators:\n\nimport numpy as np\nv = np.random.rand(n2)\nmat_rnd@v\n\narray([0.25655403, 0.73742123, 0.        , 0.16599619, 1.49963188,\n       0.35751736, 0.20725054, 0.5352658 , 0.02105027])\n\n\n\n\n\n\n\n\nEXERCISE: Linear models & sparse matrices\n\n\n\nCreate a function that can fit ordinary least squares for sparse matrices (or not). In particular, handle the usual pre-processing step of standardizing the columns of the design matrix (i.e., centering columns and dividing by standard deviation)? Beware: often you cannot center a sparse matrix without making it non-sparse.\n\n\nThe choice of a sparse format depends on the nature and structure of the data. For instance: - csc_matrix is more efficient for slicing by column, - csr_matrix is more efficient for slicing by row.",
    "crumbs": [
      "Testing Tools",
      "Sparse matrices, graphs and maps"
    ]
  },
  {
    "objectID": "Courses/Test_Python/TimeMemory.html#memory-efficiency-sparse-matrices",
    "href": "Courses/Test_Python/TimeMemory.html#memory-efficiency-sparse-matrices",
    "title": "Sparse matrices, graphs and maps",
    "section": "",
    "text": "Sparse matrices are useful to handle potentially huge matrices with structures. The most standard structure is sparsity, i.e., matrices that have only a few non-zero coefficients.\nThe most common formats are\n\nCOO_matrix(arg1[, shape, dtype, copy]): A sparse matrix in COOrdinate format.\ncsr_matrix(arg1[, shape, dtype, copy]): Compressed Sparse Row matrix (default format in scipy)\ncsc_matrix(arg1[, shape, dtype, copy]): Compressed Sparse Column matrix\n\nBelow are examples of common scenarios where sparse matrices are often used:\n\n\nA matrix might encode the presence/absence in a text of a word from a dictionary (say the set of French words). The number 0 (resp. 1) represents the presence (resp. absence) of a word in a text.\n\n\n\nTo handle categorical data encoding as strings, many algorithms require that you first transform such variables as numerical vectors. The simplest protocol is to create one column to represent each modality of the categorical variable and to set the value to 1 if the observation is of that modality, and 0 otherwise. This is called one-hot encoding or dummy encoding. By construction, this can be encoded into a sparse (binary) matrix.\nAn example with pandas and sklearn is given below (recall that 0 represents False and 1 represents True):\n\nimport os\nimport pandas as pd\nimport pooch  # download data / avoid re-downloading\nfrom sklearn import datasets\nfrom sklearn.preprocessing import OneHotEncoder\nfrom sklearn.compose import make_column_transformer\n\nurl = \"http://josephsalmon.eu/enseignement/datasets/titanic.csv\"\npath_target = \"./titanic.csv\"\npath, fname = os.path.split(path_target)\npooch.retrieve(url, path=path, fname=fname, known_hash=None)\n\ncategorical_column = ['Embarked']\ndf_titanic_raw = pd.read_csv(\"titanic.csv\", usecols=categorical_column)\nprint(df_titanic_raw.info())\nprint(df_titanic_raw.head())\n\n&lt;class 'pandas.core.frame.DataFrame'&gt;\nRangeIndex: 891 entries, 0 to 890\nData columns (total 1 columns):\n #   Column    Non-Null Count  Dtype \n---  ------    --------------  ----- \n 0   Embarked  889 non-null    object\ndtypes: object(1)\nmemory usage: 7.1+ KB\nNone\n  Embarked\n0        S\n1        C\n2        S\n3        S\n4        S\n\n\npandas approach with get_dummies:\n\ndummies = pd.get_dummies(df_titanic_raw.Embarked, sparse=True)\ndummies.info()\n\n&lt;class 'pandas.core.frame.DataFrame'&gt;\nRangeIndex: 891 entries, 0 to 890\nData columns (total 3 columns):\n #   Column  Non-Null Count  Dtype              \n---  ------  --------------  -----              \n 0   C       1 non-null      Sparse[bool, False]\n 1   Q       1 non-null      Sparse[bool, False]\n 2   S       1 non-null      Sparse[bool, False]\ndtypes: Sparse[bool, False](3)\nmemory usage: 4.5 KB\n\n\nsklearn approach with OneHotEncoder:\n\ntransformer=make_column_transformer((OneHotEncoder(), ['Embarked']), remainder=\"passthrough\")\nmatrix_embarked = transformer.fit_transform(df_titanic_raw)\nprint(matrix_embarked)\nprint(type(matrix_embarked))\n\n\n\n\n  (0, 2)    1.0\n  (1, 0)    1.0\n  (2, 2)    1.0\n  (3, 2)    1.0\n  (4, 2)    1.0\n  (5, 1)    1.0\n  (6, 2)    1.0\n  (7, 2)    1.0\n  (8, 2)    1.0\n  (9, 0)    1.0\n  (10, 2)   1.0\n  (11, 2)   1.0\n  (12, 2)   1.0\n  (13, 2)   1.0\n  (14, 2)   1.0\n  (15, 2)   1.0\n  (16, 1)   1.0\n  (17, 2)   1.0\n  (18, 2)   1.0\n  (19, 0)   1.0\n  (20, 2)   1.0\n  (21, 2)   1.0\n  (22, 1)   1.0\n  (23, 2)   1.0\n  (24, 2)   1.0\n  : :\n  (866, 0)  1.0\n  (867, 2)  1.0\n  (868, 2)  1.0\n  (869, 2)  1.0\n  (870, 2)  1.0\n  (871, 2)  1.0\n  (872, 2)  1.0\n  (873, 2)  1.0\n  (874, 0)  1.0\n  (875, 0)  1.0\n  (876, 2)  1.0\n  (877, 2)  1.0\n  (878, 2)  1.0\n  (879, 0)  1.0\n  (880, 2)  1.0\n  (881, 2)  1.0\n  (882, 2)  1.0\n  (883, 2)  1.0\n  (884, 2)  1.0\n  (885, 1)  1.0\n  (886, 2)  1.0\n  (887, 2)  1.0\n  (888, 2)  1.0\n  (889, 0)  1.0\n  (890, 1)  1.0\n&lt;class 'scipy.sparse._csr.csr_matrix'&gt;\n\n\n\n\n\n\n\n\n\nNote\n\n\n\nThe differences between the two approaches are: - the encoding of absence/presence (True/False vs. 0/1) - the output created handles missing values differently by default\n\n\n\n\n\nFor instance, when very distant particles/objects have little influence, their value can be set to zero when representing physical quantities (e.g., heat diffusion, fluid mechanics, electro/magnetism, etc.)\n\n\n\nGraphs are naturally represented by adjacency or incidence matrices (cf. below), and therefore beyond the graphs, maps! We illustrate that in the last section of the course.\nReferences:\n\nScipy Lectures: why sparse matrices\nSparse data structures in Python, by Artem Golubin\nIntroduction to Sparse Matrices in Python with SciPy, by cmdlinetips\nScipy doc on sparse matrices\n\n\n\n\n\nfrom scipy import sparse\nfrom scipy.sparse import isspmatrix\n\nId = sparse.eye(3)\nprint(Id.toarray())\nprint(f'Q: Is the matrix Id is sparse?\\nA: {isspmatrix(Id)}')\n\nn1 = 9\nn2 = 9\nmat_rnd = sparse.rand(n1, n2, density=0.25, format=\"csr\",\n                      random_state=42)\nprint(mat_rnd.toarray())\nprint(f'Q: Is the matrix mat_rnd sparse?\\nA: {isspmatrix(mat_rnd)}')\n\n[[1. 0. 0.]\n [0. 1. 0.]\n [0. 0. 1.]]\nQ: Is the matrix Id is sparse?\nA: True\n[[0.54269608 0.         0.07455064 0.         0.         0.11586906\n  0.         0.         0.        ]\n [0.         0.77224477 0.         0.98688694 0.         0.\n  0.33089802 0.         0.86310343]\n [0.         0.         0.         0.         0.         0.\n  0.         0.         0.        ]\n [0.         0.81546143 0.         0.28093451 0.         0.\n  0.         0.         0.        ]\n [0.00552212 0.         0.14092422 0.80219698 0.06355835 0.70685734\n  0.         0.77127035 0.        ]\n [0.         0.         0.         0.         0.         0.\n  0.         0.35846573 0.        ]\n [0.         0.         0.         0.72900717 0.         0.\n  0.         0.         0.        ]\n [0.         0.         0.         0.         0.         0.\n  0.62329813 0.19871568 0.        ]\n [0.         0.         0.         0.07404465 0.         0.\n  0.         0.         0.        ]]\nQ: Is the matrix mat_rnd sparse?\nA: True\n\n\nA matrix-vector product can be performed as usual, with the @ operators:\n\nimport numpy as np\nv = np.random.rand(n2)\nmat_rnd@v\n\narray([0.25655403, 0.73742123, 0.        , 0.16599619, 1.49963188,\n       0.35751736, 0.20725054, 0.5352658 , 0.02105027])\n\n\n\n\n\n\n\n\nEXERCISE: Linear models & sparse matrices\n\n\n\nCreate a function that can fit ordinary least squares for sparse matrices (or not). In particular, handle the usual pre-processing step of standardizing the columns of the design matrix (i.e., centering columns and dividing by standard deviation)? Beware: often you cannot center a sparse matrix without making it non-sparse.\n\n\nThe choice of a sparse format depends on the nature and structure of the data. For instance: - csc_matrix is more efficient for slicing by column, - csr_matrix is more efficient for slicing by row.",
    "crumbs": [
      "Testing Tools",
      "Sparse matrices, graphs and maps"
    ]
  },
  {
    "objectID": "Courses/Test_Python/TimeMemory.html#graphs-and-sparsity",
    "href": "Courses/Test_Python/TimeMemory.html#graphs-and-sparsity",
    "title": "Sparse matrices, graphs and maps",
    "section": "Graphs and sparsity",
    "text": "Graphs and sparsity\nA classical field for the application of sparse matrices is when using graphs: although the number of nodes can be huge, each node of a graph is in general not connected to all nodes. Let us represent a graph by its adjacency matrix:\n\nDefinition: adjacency matrix\nSuppose that \\(G=(V,E)\\) is a graph, where \\(\\left|V\\right|=n\\). Suppose that the vertices of \\(G\\) are arbitrarily numbered \\(v_1,\\ldots,v_n.\\) The adjacency matrix \\(A\\) of \\(G\\) is the matrix \\(n \\times n\\) of general term:\n\\[\nA_{{i,j}}=\n\\left\\{\n     \\begin{array}{rl}\n         1, & \\text{if } (v_i,v_j) \\in E \\\\\n         0, & \\text{o.w.}\n      \\end{array}\n\\right.\n\\]\nNote that instead of 1, the value could vary on a per-edge basis (cf. Figure 1).\nFor standard graph manipulation the package networkx is very useful.\n\nimport networkx as nx\n\nIt allows one to define a graph very easily:\n\nG = nx.Graph()\nG.add_edge('A', 'B', weight=4)\nG.add_edge('A', 'C', weight=3)\nG.add_edge('B', 'D', weight=2)\nG.add_edge('C', 'D', weight=4)\nG.add_edge('D', 'A', weight=2)\n\nand then visualize it:\n\nimport matplotlib.pyplot as plt\nmy_seed = 44\nnx.draw_networkx(\n    G, with_labels=True,\n    node_size=1000,\n    pos=nx.spring_layout(G, seed=my_seed)\n)\n\nlabels = nx.get_edge_attributes(G, \"weight\")\nnx.draw_networkx_edges(\n    G,\n    pos=nx.spring_layout(G, seed=my_seed),\n    width=[6 * i for i in list(labels.values())],\n)\nnx.draw_networkx_edge_labels(\n    G, pos=nx.spring_layout(G, seed=my_seed),\n    edge_labels=labels\n)\nplt.axis(\"off\")\nplt.show()\n\n\n\n\n\n\n\nFigure 1: Plot a simple graph\n\n\n\n\n\nYou can get (a variant of) the adjacency matrix using\n\nA = nx.adjacency_matrix(G)\nprint(A.todense(), f\"Q: Is A spase?\\nA: {isspmatrix(A)}\")\n\n[[0 4 3 2]\n [4 0 0 2]\n [3 0 0 4]\n [2 2 4 0]] Q: Is A spase?\nA: False\n\n\nwhere the adjacency matrix is stored in a sparse format, and can also encode the weights of the edges.\nWith networkx, it is simple to get the shortest path between two nodes in a graph using the shortest_path function:\n\nshortest_path = nx.shortest_path(G, 'C', 'B', weight='weight')\nstr_shortest_path = ' -&gt; '.join(shortest_path)\nprint(f\"The shortest path between C and B is:\\n {str_shortest_path}\")\n\nThe shortest path between C and B is:\n C -&gt; D -&gt; B\n\n\n\n\nDefinition : incidence matrix\nLet \\(G = (V,E)\\) be a (non-oriented) graph with \\(n\\) vertices, \\(V = [1,\\dots,n]\\), and \\(p\\) edges, \\(E = [1,\\dots,p]\\). The graph can be represented by its vertex-edge incidence matrix \\(D^\\top \\in \\mathbb{R}^{p \\times n}\\) defined by\n\\[\n(D^\\top)_{{e,v}} =\n\\left\\{\n     \\begin{array}{rl}\n    + 1, & \\text{if } v = \\min(i,j) \\\\\n    -1, & \\text{si } v = \\max(i,j) \\\\\n    0, & \\text{sinon}\n  \\end{array}\n  \\right.\n\\]\nwhere \\(e = (i,j)\\).\n\n\nDefinition : Laplacian matrix\nThe matrix \\(L=D D^\\top\\) is the so-called graph Laplacian of \\(G\\)\n\nD = nx.incidence_matrix(G, oriented=True).T\nL = nx.laplacian_matrix(G)\nprint(isspmatrix(D))\nprint(D.todense(), L.todense())\n\nFalse\n[[-1.  1.  0.  0.]\n [-1.  0.  1.  0.]\n [-1.  0.  0.  1.]\n [ 0. -1.  0.  1.]\n [ 0.  0. -1.  1.]] [[ 9 -4 -3 -2]\n [-4  6  0 -2]\n [-3  0  7 -4]\n [-2 -2 -4  8]]\n\n\n\n\nMore graph visualizations\n\ng = nx.karate_club_graph()\n\n# Return a list of tuples each tuple is (node, deg)\nlist_degree = list(g.degree())\n# Build a node list and corresponding degree list\nnodes, degree = map(list, zip(*list_degree))\n\nfig, ax = plt.subplots(1, 1, figsize=(8, 6))\nnx.draw(\n    g,\n    ax=ax,\n    nodelist=nodes,\n    node_size=[(v * 30) + 1 for v in degree],\n    width=4,\n    alpha=0.7,\n    edgecolors=\"white\",\n    node_color=\"#1f78b4\",\n    edge_color=\"#1f78b4\",\n)\nplt.axis(\"off\")\nplt.show()\n\n\n\n\n\n\n\n\n\n\nBack to sparse matrices\n\nA = nx.adjacency_matrix(g).T\nprint(A.todense())\n\nfig, ax = plt.subplots()\nax = plt.spy(A)\nprint(f\"Pourcentage of active edges: {(g.number_of_edges() / g.number_of_nodes()**2) * 100:.2f} %\")\n\n[[0 4 5 ... 2 0 0]\n [4 0 6 ... 0 0 0]\n [5 6 0 ... 0 2 0]\n ...\n [2 0 0 ... 0 4 4]\n [0 0 2 ... 4 0 5]\n [0 0 0 ... 4 5 0]]\nPourcentage of active edges: 6.75 %\n\n\n\n\n\n\n\n\n\nRemark: a possible visualization with Javascript (not so stable though, can be skipped)\n\nInteractive Networks with networkx and d3\nner2sna: Entity Extraction and Network Analysis\n\n\n\nPlanar graphs and maps\nOpen Street Map can interface with networkx using the osmnx package.\n\nThe osmnx package\nKnown bug for old versions: - Cannot import name ‘CRS’ from ‘pyproj’ in osmnx\n\nTypeError: argument of type ‘CRS’ is not iterable” with osmnx\n\nSo pick version 0.14 at least conda install osmnx&gt;=0.14 or pip install osmnx&gt;=0.10.\nFor Windows users, there might be some trouble with installing the fiona package, see:\n\nInstalling geopandas:” A GDAL API version must be specified (anaconda)\nInstall fiona on Windows\n\nSpecial case for osmnx on Windows follow the next step in order:\n\npip install osmnx\npip install Rtree\nconda install -c conda-forge libspatialindex=1.9.3\npip install osmnx\nInstall all packages required up to fiona.\nconda install -c conda-forge geopandas\nSay yes to everything\nOnce done, launch pip install osmnx==1.0.1\n\n\nimport osmnx as ox\nox.settings.use_cache=True\nox.__version__\n\n'1.9.4'\n\n\n\nG = ox.graph_from_place('Montpellier, France', network_type='bike')\nprint(f\"nb edges: {G.number_of_edges()}\")\nprint(f\"nb nodes: {G.number_of_nodes()}\")\n\nnb edges: 33857\nnb nodes: 15343\n\n\n\nfig, ax = ox.plot_graph(G)\n\n\n\n\n\n\n\n\nYou also need to install the package folium for the visualization of the maps.\n\nimport folium\n\n\nmap_osm = folium.Map(location=[43.610769, 3.876716])\n\n\nmap_osm.add_child(folium.RegularPolygonMarker(location=[43.610769, 3.876716],\n                  fill_color='#132b5e', radius=5))\nmap_osm\n\nMake this Notebook Trusted to load map: File -&gt; Trust Notebook\n\n\n\nD = nx.incidence_matrix(G, oriented=True).T\n\n\nelement = np.zeros(1, dtype=float)\nmem = np.prod(D.shape) * element.data.nbytes / (1024**2)\nprint('Size of full matrix with zeros: {0:3.2f}  MB'.format(mem))\n\nprint('Size of sparse matrix: {0:3.2f}  MB'.format(D.data.nbytes/(1024**2) ))\n\nprint('Ratio  of full matrix size / sparse: {0:3.2f}%'.format(100 * D.data.nbytes / (1024**2 * mem)))\nprint(isspmatrix(D))\n\nSize of full matrix with zeros: 3963.23  MB\nSize of sparse matrix: 0.51  MB\nRatio  of full matrix size / sparse: 0.01%\nFalse\n\n\nAlternatively: you can uncomment the following line, and check that the size of a similar matrix (with a non-sparse format) would be huge,\n&gt;&gt;&gt; Size of a full matrix encoding the zeros: 4 gB\nCreate a matrix of similar size. BEWARE: This creates a huge matrix:\n\nM = np.random.randn(G.number_of_nodes(), G.number_of_nodes())\nprint('Size of a full encoding the zeros: {0:3.2f}  MB'.format(M.nbytes/(1024**2)))\n\nSize of a full encoding the zeros: 1796.02  MB\n\n\nNow you can check the memory usage of the sparse matrix representation associated:\n\nprint(\" {0:.2} % of edges only are needed to represent the graph of Montpellier\".format(100 * G.number_of_edges() / G.number_of_nodes() ** 2))\n\n 0.014 % of edges only are needed to represent the graph of Montpellier\n\n\nHopefully, this is convincing enough to use sparse matrices when dealing with graphs and maps!\n\n\nVisualize the shortest path between two points\nReferences:\n\nOpenStreetMap Roads Data Using osmnx\n\n\norigin = ox.geocoder.geocode('Place Eugène Bataillon, Montpellier, France')\ndestination = ox.geocoder.geocode('Maison du Lez, Montpellier, France')\n\norigin_node = ox.nearest_nodes(G, origin[1], origin[0])\ndestination_node = ox.nearest_nodes(G, destination[1], destination[0])\n\nprint(origin)\nprint(destination)\nroute = ox.routing.shortest_path(G, origin_node, destination_node)\nroute_back = ox.routing.shortest_path(G, destination_node, origin_node)\n\n(43.6308638, 3.8609485)\n(43.6103224, 3.8966295)\n\n\n\nfig, ax = ox.plot_graph_routes(G, [route, route_back], route_linewidth=6, route_colors=['red', 'blue'], node_size=0)\n\n\n\n\n\n\n\n\nVisualize the same routes, but on a map:\n\n'''\nroute_edges = ox.utils_graph.route_to_gdf(G, route)\nroute_back_edges = ox.utils_graph.route_to_gdf(G, route_back)\n\nm = route_edges.explore(color=\"red\", style_kwds={\"weight\": 5, \"opacity\": 0.75})\nm = route_back_edges.explore(m=m, color=\"blue\", style_kwds={\"weight\": 5, \"opacity\": 0.75})\nm\n'''\n\n'\\nroute_edges = ox.utils_graph.route_to_gdf(G, route)\\nroute_back_edges = ox.utils_graph.route_to_gdf(G, route_back)\\n\\nm = route_edges.explore(color=\"red\", style_kwds={\"weight\": 5, \"opacity\": 0.75})\\nm = route_back_edges.explore(m=m, color=\"blue\", style_kwds={\"weight\": 5, \"opacity\": 0.75})\\nm\\n'\n\n\n\n\n\n\n\n\nNote\n\n\n\nNote that even if we call G a graph it is rather a multigraph (there might be several edges between two nodes):\n\nG.is_multigraph()\n\nTrue\n\n\n\n\nReferences:\n\nOSMnx: Python for Street Networks\nNetwork analysis in Python\nhttps://autogis-site.readthedocs.io/en/latest/index.html",
    "crumbs": [
      "Testing Tools",
      "Sparse matrices, graphs and maps"
    ]
  },
  {
    "objectID": "Courses/Test_Python/CI.html",
    "href": "Courses/Test_Python/CI.html",
    "title": "Continuous Integration",
    "section": "",
    "text": "In software engineering, continuous integration (CI) is the practice of merging all developers’ working copies to a shared mainline regularly. It is often split into three steps:\nA CI pipeline runs commands on some virtual machine automatically.",
    "crumbs": [
      "Testing Tools",
      "Continuous Integration"
    ]
  },
  {
    "objectID": "Courses/Test_Python/CI.html#references",
    "href": "Courses/Test_Python/CI.html#references",
    "title": "Continuous Integration",
    "section": "References",
    "text": "References\n\nGithub actions doc",
    "crumbs": [
      "Testing Tools",
      "Continuous Integration"
    ]
  },
  {
    "objectID": "Courses/OPP/Classes_Exceptions.html",
    "href": "Courses/OPP/Classes_Exceptions.html",
    "title": "Classes & Exceptions",
    "section": "",
    "text": "Classes are central elements in Object-oriented programming (OOP)\nA class structure defines an object, its properties, and all the operations one can apply to it. Moreover, it allows the creation of multiple instances of the same object, each with its own properties, and to apply the same operations to all of them. Another key concept is the one of inheritance, defining a new class from an existing one by simply inheriting all its properties and operations.\nIn Python, a class contains attributes (variables) and methods (functions). Syntactically, it is defined similarly to a function, replacing the def keyword with class and requiring a colon : at the end of the first line. The name of a class should be CamelCase1 (or CapWords).\nFor instance, in sklearn, the Logistic Regression class is named LogisticRegression, and can be loaded and investigated as follows:\n\nfrom sklearn.linear_model import LogisticRegression\ndir(LogisticRegression)\n\n\n\n\n['__annotations__',\n '__class__',\n '__delattr__',\n '__dict__',\n '__dir__',\n '__doc__',\n '__eq__',\n '__format__',\n '__ge__',\n '__getattribute__',\n '__getstate__',\n '__gt__',\n '__hash__',\n '__init__',\n '__init_subclass__',\n '__le__',\n '__lt__',\n '__module__',\n '__ne__',\n '__new__',\n '__reduce__',\n '__reduce_ex__',\n '__repr__',\n '__setattr__',\n '__setstate__',\n '__sizeof__',\n '__sklearn_clone__',\n '__str__',\n '__subclasshook__',\n '__weakref__',\n '_build_request_for_signature',\n '_check_feature_names',\n '_check_n_features',\n '_doc_link_module',\n '_doc_link_template',\n '_doc_link_url_param_generator',\n '_estimator_type',\n '_get_default_requests',\n '_get_doc_link',\n '_get_metadata_request',\n '_get_param_names',\n '_get_tags',\n '_more_tags',\n '_parameter_constraints',\n '_predict_proba_lr',\n '_repr_html_',\n '_repr_html_inner',\n '_repr_mimebundle_',\n '_validate_data',\n '_validate_params',\n 'decision_function',\n 'densify',\n 'fit',\n 'get_metadata_routing',\n 'get_params',\n 'predict',\n 'predict_log_proba',\n 'predict_proba',\n 'score',\n 'set_fit_request',\n 'set_params',\n 'set_score_request',\n 'sparsify']\n\n\n\n\nIn particular, you can already discover the attributes and methods shared to all classes (e.g., __class__, __init__, __doc__,), and the one specific to the LogisticRegression class (e.g., fit, get_params, predict, etc.).\nUsually, a class contains some class methods that can be seen as functions inside the class.\n\nThe first argument of a (non-static) method is usually called self: it is a mandatory element. This self argument is for self-reference. Self is a convention and not a Python keyword, so any other name can be used instead of self (e.g., this or me or in_place_of_self).\nSome method names have a specific meaning, for instance:\n\n__init__: name of the method invoked when creating the object (instantiation)\n__call__: method invoked when calling the object\n__str__: method invoked when a class has a representation as a string, e.g., when passing it to the print function\nsee Python documentation for more special names.\n\n\n\n\nLet us define a simple Point class, representing a point in the plane (i.e., a point in \\(\\mathbb{R}^2\\)):\n\nclass Point(object):\n    \"\"\"A class to represent planar points.\"\"\"\n\n    def __init__(self, x, y):\n        \"\"\"Create a new point (x, y).\"\"\"\n        self.x = x\n        self.y = y\n\n    def translate(self, dx, dy):\n        \"\"\"Translate the point by dx and dy.\"\"\"\n        self.x += dx\n        self.y += dy\n\n    def __str__(self):\n        return f\"Point: [{self.x:.3f}, {self.y:.3f}]\"\n\n\n\n\n\n\n\nNote\n\n\n\nIf you are not familiar with printing in Python, start with the new f-strings format; see for instance: https://zetcode.com/python/fstring/.\n\n\nTo create a new instance of the class Point you run the following code:\n\np1 = Point(x=0, y=0)  # call __init__ ;\n\nNow, you can access the attributes of the object p1:\n\nprint(p1.x, p1.y)\nprint(f\"{p1}\")  # call __str__\nprint(p1)\nprint(p1.__doc__)\n\n0 0\nPoint: [0.000, 0.000]\nPoint: [0.000, 0.000]\nA class to represent planar points.\n\n\nTo apply our translate method to the point p1:\n\np1.translate(dx=1, dy=1)\nprint(p1.translate)\nprint(p1)\nprint(type(p1))\n\n&lt;bound method Point.translate of &lt;__main__.Point object at 0x7ff0c83c5090&gt;&gt;\nPoint: [1.000, 1.000]\n&lt;class '__main__.Point'&gt;\n\n\nImplicitly, the previous command is equivalent to Point.translate(p1, dx=1, dy=1). Indeed, you can check the output of the following command:\n\np1 = Point(x=0, y=0)\nPoint.translate(p1, dx=1, dy=1)\nprint(p1)\n\nPoint: [1.000, 1.000]\n\n\n\n\n\n\n\n\nNote\n\n\n\nYou might have already used that syntax with the “dot” (.) notation in numpy, for instance when executing a numpy function as follows\n\nimport numpy as np\nrng = np.random.default_rng(seed=12345)\na = rng.random((3, 3))\na.mean(axis=0)\n\narray([0.50063315, 0.29820069, 0.60097848])\n\n\nIn that case, a was an instance of the numpy.ndarray class (see numpy documentation for details on this class):\n\ntype(a)\n\nnumpy.ndarray\n\n\n\n\n\n\n\nMyClass(arg1, arg2, ...) is a shorthand for MyClass.__call__(arg1, arg2, ...), so this allows writing classes where the instances behave like functions and can be called like a function\n\nclass Sum:\n    def __init__(self):\n        print(\"Instance Created\")\n\n    # Defining __call__ method\n    def __call__(self, a, b):\n        print(a + b)\n\n# Instance created\nsum_as_a_function = Sum()\n\n# __call__ method will be called\nsum_as_a_function(10, 20)\n\nInstance Created\n30\n\n\nA test function of interest is isinstance which allows checking if an object is of the correct class. For instance, one can check if sum_as_a_function is an instance of Sum\n\nisinstance(sum_as_a_function, Sum)\n\nTrue\n\n\nor an instance of Point:\n\nisinstance(sum_as_a_function, Point)\n\nFalse\n\n\nAnother example of a callable is given below with a simple Counter class:\n\nclass Counter:\n    \"\"\"A simple counter class.\"\"\"\n\n    def __init__(self):\n        self.count = 0\n\n    def increment(self):\n        self.count += 1\n\n    def __call__(self):\n        self.increment()\n\nThen, performing the following commands you can check how the __call__ method is called:\n\ncounter = Counter()\nprint(counter.count)\ncounter.increment()\nprint(counter.count)\ncounter()\nprint(counter.count)\n\n0\n1\n2\n\n\nIn particular, note that a method of a class can modify the state of a particular instance. This does not alter the other instantiations of the class. \n\n\n\n\n\n\nTo go further\n\n\n\nThis example and more details on callable are described in detail in this Real Python post.\n\n\n\n\n\n\n\n\nEXERCISE: Gaussian class\n\n\n\nImplement a class Gaussian with attributes mean and std with a method\n\n__str__ returning a string with the expression of the density\n__eq__ testing the equality of two instances. You should use numpy.isclose()\n__add__ implementing the (left) addition of independent Gaussian, or more precisely their pdfs (probability density functions)\n__radd__ implementing the (right) addition of independent Gaussian, or more precisely their pdfs (probability density functions)\n\nNote: when executing a+b what really happens is that the add method of the a: object is called a.__add__(b). See stackoverflow for more details on the __add__ and __radd__ methods.\n\ng1 = Gaussian(0.0, 1.0)\ng2 = Gaussian(1.0, 2.0)\ng3 = Gaussian(2.0, 2.0)\ng4 = Gaussian(3.0, 3.0)\n\nprint(g1)\nprint(g2)\nprint(g3)\nprint(g4)\nprint(g2 + g1)\nprint(sum([g1, g2, g3]))\nprint(sum([g1, g2, g3]) == g4)\n\npdf: exp(-(x - 0.000)^2 / (1.000*2^2)) / sqrt(2 * pi * 1.000^2)\npdf: exp(-(x - 1.000)^2 / (2.000*2^2)) / sqrt(2 * pi * 2.000^2)\npdf: exp(-(x - 2.000)^2 / (2.000*2^2)) / sqrt(2 * pi * 2.000^2)\npdf: exp(-(x - 3.000)^2 / (3.000*2^2)) / sqrt(2 * pi * 3.000^2)\npdf: exp(-(x - 1.000)^2 / (2.236*2^2)) / sqrt(2 * pi * 2.236^2)\npdf: exp(-(x - 3.000)^2 / (3.000*2^2)) / sqrt(2 * pi * 3.000^2)\nTrue\n\n\n\n\nAn operator like + may have a different meaning depending on the context (e.g., addition of numbers, concatenation of strings, etc.). This is called operator overloading, or sometimes ad hoc polymorphism.\n\n\n\nClasses can inherit methods from other classes. You can use super (Latin word for “above”) to access the parent class from a child class. This is useful when you want to extend the functionality of the inherited method.\nA simple test consists of checking whether a class has inherited from another one. issubclass allows one to check this heritage property. For instance, we can check that the following IsoGaussian is a subclass of the Gaussian class we have created above:\n\nclass IsoGaussian(Gaussian):\n    def __init__(self, mean):\n        super().__init__(mean, 1.0)\n\n\ngg1 = IsoGaussian(3)\nprint(gg1)\nprint(issubclass(IsoGaussian, Gaussian))\n\npdf: exp(-(x - 3.000)^2 / (1.000*2^2)) / sqrt(2 * pi * 1.000^2)\nTrue\n\n\n\n\n\n\n\n\nTo go further\n\n\n\nFor more information on super, see for instance this Real Python Tutorials.\n\n\n\n\n\n\n\n\nEXERCISE: inheritance\n\n\n\nWhat is the inheritance for the LogisticRegression class in scikit-learn? In particular, not that inheritance could be multiple, i.e.. a class can inherit from several classes.\nHint: use the __bases__ attribute of the class.\n\nfrom sklearn.linear_model import LogisticRegression\n\na = LogisticRegression()\nprint(a.__class__.__bases__)\n\n(&lt;class 'sklearn.linear_model._base.LinearClassifierMixin'&gt;, &lt;class 'sklearn.linear_model._base.SparseCoefMixin'&gt;, &lt;class 'sklearn.base.BaseEstimator'&gt;)\n\n\n\n\nMany other examples can be found in the scikit-learn package (see for instance the module Linear Model often used in machine learning or statistics).",
    "crumbs": [
      "OOP",
      "Classes & Exceptions"
    ]
  },
  {
    "objectID": "Courses/OPP/Classes_Exceptions.html#classes",
    "href": "Courses/OPP/Classes_Exceptions.html#classes",
    "title": "Classes & Exceptions",
    "section": "",
    "text": "Classes are central elements in Object-oriented programming (OOP)\nA class structure defines an object, its properties, and all the operations one can apply to it. Moreover, it allows the creation of multiple instances of the same object, each with its own properties, and to apply the same operations to all of them. Another key concept is the one of inheritance, defining a new class from an existing one by simply inheriting all its properties and operations.\nIn Python, a class contains attributes (variables) and methods (functions). Syntactically, it is defined similarly to a function, replacing the def keyword with class and requiring a colon : at the end of the first line. The name of a class should be CamelCase1 (or CapWords).\nFor instance, in sklearn, the Logistic Regression class is named LogisticRegression, and can be loaded and investigated as follows:\n\nfrom sklearn.linear_model import LogisticRegression\ndir(LogisticRegression)\n\n\n\n\n['__annotations__',\n '__class__',\n '__delattr__',\n '__dict__',\n '__dir__',\n '__doc__',\n '__eq__',\n '__format__',\n '__ge__',\n '__getattribute__',\n '__getstate__',\n '__gt__',\n '__hash__',\n '__init__',\n '__init_subclass__',\n '__le__',\n '__lt__',\n '__module__',\n '__ne__',\n '__new__',\n '__reduce__',\n '__reduce_ex__',\n '__repr__',\n '__setattr__',\n '__setstate__',\n '__sizeof__',\n '__sklearn_clone__',\n '__str__',\n '__subclasshook__',\n '__weakref__',\n '_build_request_for_signature',\n '_check_feature_names',\n '_check_n_features',\n '_doc_link_module',\n '_doc_link_template',\n '_doc_link_url_param_generator',\n '_estimator_type',\n '_get_default_requests',\n '_get_doc_link',\n '_get_metadata_request',\n '_get_param_names',\n '_get_tags',\n '_more_tags',\n '_parameter_constraints',\n '_predict_proba_lr',\n '_repr_html_',\n '_repr_html_inner',\n '_repr_mimebundle_',\n '_validate_data',\n '_validate_params',\n 'decision_function',\n 'densify',\n 'fit',\n 'get_metadata_routing',\n 'get_params',\n 'predict',\n 'predict_log_proba',\n 'predict_proba',\n 'score',\n 'set_fit_request',\n 'set_params',\n 'set_score_request',\n 'sparsify']\n\n\n\n\nIn particular, you can already discover the attributes and methods shared to all classes (e.g., __class__, __init__, __doc__,), and the one specific to the LogisticRegression class (e.g., fit, get_params, predict, etc.).\nUsually, a class contains some class methods that can be seen as functions inside the class.\n\nThe first argument of a (non-static) method is usually called self: it is a mandatory element. This self argument is for self-reference. Self is a convention and not a Python keyword, so any other name can be used instead of self (e.g., this or me or in_place_of_self).\nSome method names have a specific meaning, for instance:\n\n__init__: name of the method invoked when creating the object (instantiation)\n__call__: method invoked when calling the object\n__str__: method invoked when a class has a representation as a string, e.g., when passing it to the print function\nsee Python documentation for more special names.\n\n\n\n\nLet us define a simple Point class, representing a point in the plane (i.e., a point in \\(\\mathbb{R}^2\\)):\n\nclass Point(object):\n    \"\"\"A class to represent planar points.\"\"\"\n\n    def __init__(self, x, y):\n        \"\"\"Create a new point (x, y).\"\"\"\n        self.x = x\n        self.y = y\n\n    def translate(self, dx, dy):\n        \"\"\"Translate the point by dx and dy.\"\"\"\n        self.x += dx\n        self.y += dy\n\n    def __str__(self):\n        return f\"Point: [{self.x:.3f}, {self.y:.3f}]\"\n\n\n\n\n\n\n\nNote\n\n\n\nIf you are not familiar with printing in Python, start with the new f-strings format; see for instance: https://zetcode.com/python/fstring/.\n\n\nTo create a new instance of the class Point you run the following code:\n\np1 = Point(x=0, y=0)  # call __init__ ;\n\nNow, you can access the attributes of the object p1:\n\nprint(p1.x, p1.y)\nprint(f\"{p1}\")  # call __str__\nprint(p1)\nprint(p1.__doc__)\n\n0 0\nPoint: [0.000, 0.000]\nPoint: [0.000, 0.000]\nA class to represent planar points.\n\n\nTo apply our translate method to the point p1:\n\np1.translate(dx=1, dy=1)\nprint(p1.translate)\nprint(p1)\nprint(type(p1))\n\n&lt;bound method Point.translate of &lt;__main__.Point object at 0x7ff0c83c5090&gt;&gt;\nPoint: [1.000, 1.000]\n&lt;class '__main__.Point'&gt;\n\n\nImplicitly, the previous command is equivalent to Point.translate(p1, dx=1, dy=1). Indeed, you can check the output of the following command:\n\np1 = Point(x=0, y=0)\nPoint.translate(p1, dx=1, dy=1)\nprint(p1)\n\nPoint: [1.000, 1.000]\n\n\n\n\n\n\n\n\nNote\n\n\n\nYou might have already used that syntax with the “dot” (.) notation in numpy, for instance when executing a numpy function as follows\n\nimport numpy as np\nrng = np.random.default_rng(seed=12345)\na = rng.random((3, 3))\na.mean(axis=0)\n\narray([0.50063315, 0.29820069, 0.60097848])\n\n\nIn that case, a was an instance of the numpy.ndarray class (see numpy documentation for details on this class):\n\ntype(a)\n\nnumpy.ndarray\n\n\n\n\n\n\n\nMyClass(arg1, arg2, ...) is a shorthand for MyClass.__call__(arg1, arg2, ...), so this allows writing classes where the instances behave like functions and can be called like a function\n\nclass Sum:\n    def __init__(self):\n        print(\"Instance Created\")\n\n    # Defining __call__ method\n    def __call__(self, a, b):\n        print(a + b)\n\n# Instance created\nsum_as_a_function = Sum()\n\n# __call__ method will be called\nsum_as_a_function(10, 20)\n\nInstance Created\n30\n\n\nA test function of interest is isinstance which allows checking if an object is of the correct class. For instance, one can check if sum_as_a_function is an instance of Sum\n\nisinstance(sum_as_a_function, Sum)\n\nTrue\n\n\nor an instance of Point:\n\nisinstance(sum_as_a_function, Point)\n\nFalse\n\n\nAnother example of a callable is given below with a simple Counter class:\n\nclass Counter:\n    \"\"\"A simple counter class.\"\"\"\n\n    def __init__(self):\n        self.count = 0\n\n    def increment(self):\n        self.count += 1\n\n    def __call__(self):\n        self.increment()\n\nThen, performing the following commands you can check how the __call__ method is called:\n\ncounter = Counter()\nprint(counter.count)\ncounter.increment()\nprint(counter.count)\ncounter()\nprint(counter.count)\n\n0\n1\n2\n\n\nIn particular, note that a method of a class can modify the state of a particular instance. This does not alter the other instantiations of the class. \n\n\n\n\n\n\nTo go further\n\n\n\nThis example and more details on callable are described in detail in this Real Python post.\n\n\n\n\n\n\n\n\nEXERCISE: Gaussian class\n\n\n\nImplement a class Gaussian with attributes mean and std with a method\n\n__str__ returning a string with the expression of the density\n__eq__ testing the equality of two instances. You should use numpy.isclose()\n__add__ implementing the (left) addition of independent Gaussian, or more precisely their pdfs (probability density functions)\n__radd__ implementing the (right) addition of independent Gaussian, or more precisely their pdfs (probability density functions)\n\nNote: when executing a+b what really happens is that the add method of the a: object is called a.__add__(b). See stackoverflow for more details on the __add__ and __radd__ methods.\n\ng1 = Gaussian(0.0, 1.0)\ng2 = Gaussian(1.0, 2.0)\ng3 = Gaussian(2.0, 2.0)\ng4 = Gaussian(3.0, 3.0)\n\nprint(g1)\nprint(g2)\nprint(g3)\nprint(g4)\nprint(g2 + g1)\nprint(sum([g1, g2, g3]))\nprint(sum([g1, g2, g3]) == g4)\n\npdf: exp(-(x - 0.000)^2 / (1.000*2^2)) / sqrt(2 * pi * 1.000^2)\npdf: exp(-(x - 1.000)^2 / (2.000*2^2)) / sqrt(2 * pi * 2.000^2)\npdf: exp(-(x - 2.000)^2 / (2.000*2^2)) / sqrt(2 * pi * 2.000^2)\npdf: exp(-(x - 3.000)^2 / (3.000*2^2)) / sqrt(2 * pi * 3.000^2)\npdf: exp(-(x - 1.000)^2 / (2.236*2^2)) / sqrt(2 * pi * 2.236^2)\npdf: exp(-(x - 3.000)^2 / (3.000*2^2)) / sqrt(2 * pi * 3.000^2)\nTrue\n\n\n\n\nAn operator like + may have a different meaning depending on the context (e.g., addition of numbers, concatenation of strings, etc.). This is called operator overloading, or sometimes ad hoc polymorphism.\n\n\n\nClasses can inherit methods from other classes. You can use super (Latin word for “above”) to access the parent class from a child class. This is useful when you want to extend the functionality of the inherited method.\nA simple test consists of checking whether a class has inherited from another one. issubclass allows one to check this heritage property. For instance, we can check that the following IsoGaussian is a subclass of the Gaussian class we have created above:\n\nclass IsoGaussian(Gaussian):\n    def __init__(self, mean):\n        super().__init__(mean, 1.0)\n\n\ngg1 = IsoGaussian(3)\nprint(gg1)\nprint(issubclass(IsoGaussian, Gaussian))\n\npdf: exp(-(x - 3.000)^2 / (1.000*2^2)) / sqrt(2 * pi * 1.000^2)\nTrue\n\n\n\n\n\n\n\n\nTo go further\n\n\n\nFor more information on super, see for instance this Real Python Tutorials.\n\n\n\n\n\n\n\n\nEXERCISE: inheritance\n\n\n\nWhat is the inheritance for the LogisticRegression class in scikit-learn? In particular, not that inheritance could be multiple, i.e.. a class can inherit from several classes.\nHint: use the __bases__ attribute of the class.\n\nfrom sklearn.linear_model import LogisticRegression\n\na = LogisticRegression()\nprint(a.__class__.__bases__)\n\n(&lt;class 'sklearn.linear_model._base.LinearClassifierMixin'&gt;, &lt;class 'sklearn.linear_model._base.SparseCoefMixin'&gt;, &lt;class 'sklearn.base.BaseEstimator'&gt;)\n\n\n\n\nMany other examples can be found in the scikit-learn package (see for instance the module Linear Model often used in machine learning or statistics).",
    "crumbs": [
      "OOP",
      "Classes & Exceptions"
    ]
  },
  {
    "objectID": "Courses/OPP/Classes_Exceptions.html#exceptions",
    "href": "Courses/OPP/Classes_Exceptions.html#exceptions",
    "title": "Classes & Exceptions",
    "section": "Exceptions",
    "text": "Exceptions\nThis section is inspired by Fabien Maussion’s lecture on Scientific Programming, and describes how to handle exceptions in python.\n\nIn python errors are handled through Exceptions\nAn error throws an Exception interrupting the normal code execution\nExecution can overpass such an issue inside a bloc with try - except\nA typical use case: stop the program when an error occurs:\n\ndef my_function(arguments):\n    if not verify(arguments):\n        raise Exception(\"Invalid arguments\")\n\n    # ...\n    # Keep working if the exception is not raised\n\n\n\n\n\n\nTo go further\n\n\n\nThe list of possible errors is available here: https://docs.python.org/3/library/exceptions.html#bltin-exceptions and includes NameError, ImportError, AssertionError etc.\n\n\n\ntry - except - finally syntax\ntry - except - finally is a syntax to handle exceptions in python, and it helps prevent errors from stopping a program. The syntax is the following:\ntry:\n    # Part 1: Normal code goes here\nexcept:\n    # Part 2: Code for error handling goes here\n    # This code is not executed unless Part 1\n    # above generated an error\nfinally:\n    # Optional: This clause is executed no matter what,\n    # and is generally used to release external resources.\nLet us consider the following example to understand the syntax better:\n\ntry:\n    print(\"test_var testing:\")\n    e = 4\n    print(test_var)  # raise an error: the test_var variable is not defined\nexcept NameError:\n    print(\"Caught an exception: test_var does not exist\")\nfinally:\n    print(\"This code is executed no matter what\")\n\nprint(\"The program keep continuing... it does not freeze!\")\nprint(f\"Beware! the affectation step: e = {e} was executed.\")\n\ntest_var testing:\nCaught an exception: test_var does not exist\nThis code is executed no matter what\nThe program keep continuing... it does not freeze!\nBeware! the affectation step: e = 4 was executed.\n\n\nTo obtain some information on the error: it is possible to access the instance of the Exception class thrown by the program through the following syntax:\n\ntry:\n    print(\"test\")\n    print(testtt)  # Error: the variable testtt is not defined\nexcept Exception as name_exception:\n    print(\"Caught an exception:\", name_exception)\n\ntest\nCaught an exception: name 'testtt' is not defined\n\n\nA common use case is to test if the import of a package was successful or not. For instance, if you try loading a package pooooch that is not installed on your machine, the following code will raise an error:\n\nimport pooooch\n\n\n---------------------------------------------------------------------------\nModuleNotFoundError                       Traceback (most recent call last)\nCell In[20], line 1\n----&gt; 1 import pooooch\n\nModuleNotFoundError: No module named 'pooooch'\n\n\n\nIf you would like the program to continue even if the package is not installed, you can use the following syntax:\n\ntry:\n    import pooch\nexcept Exception as e:\n    print(e)\n\nAn exhaustive list of exceptions be found here: https://docs.python.org/3/library/exceptions.html.\n\n\nThe with statement\n\n\n\n\n\n\nImportant\n\n\n\nYou have to run the following lines at a location where a directory called scripts/ containing a function hello-world.py exists. If you have not cloned the course repository, the file used in the lecture is available here. You can, of course, create your own if you prefer.\n\n\n\nfname = \"./scripts/hello-world.py\"\n\nwith open(fname) as file:  # Use file to refer to the file object\n    data = file.read()\n    print(data)\n    # at the end of the code chunk, the file.__exit__() method is called\n    # (i.e., file.close() is executed automatically)\n\ntatjpjepj.\n\n\n\nNow, let us try with a file that does not exist:\n\nfname = \"scripts/hello-world_do_not_exist.py\"\ntry:\n    # 1/0  # Uncomment at some point and run\n    file = open(fname)\n    data = file.read()\n    print(data)\nexcept FileNotFoundError:\n    print(\"File not found!\")\nexcept (RuntimeError, TypeError, NameError, ZeroDivisionError):\n    print(\"Specific Error message 2\")\nfinally:\n    file.close()  # Important line to release access to the file!\n\nFile not found!\n\n\n\n\n\n\n\n\nEXERCISE: Improving the Gaussian class\n\n\n\nCreate a sub-class GaussianBis where you check if the user has provided float arguments (see also assert and isinstance routines). Print a custom explicit error message if it is not the case.",
    "crumbs": [
      "OOP",
      "Classes & Exceptions"
    ]
  },
  {
    "objectID": "Courses/OPP/Classes_Exceptions.html#scope",
    "href": "Courses/OPP/Classes_Exceptions.html#scope",
    "title": "Classes & Exceptions",
    "section": "Scope",
    "text": "Scope\nThe scope of a variable is the part of the program where the variable is accessible. In python, the scope of a variable is defined by its location in the code (i.e., where you define it).\ne = 0\nprint(e)\n\nfor i in range(1):\n    e = 1\n\nprint(e)\n\n\ndef f():\n    e = 2\n\n\nprint(e)\nConclusion: e is only “visible” inside the function definition. See https://realpython.com/python-scope-legb-rule/ for more information on this topic.",
    "crumbs": [
      "OOP",
      "Classes & Exceptions"
    ]
  },
  {
    "objectID": "Courses/OPP/Classes_Exceptions.html#manipulate-file-names-across-platforms",
    "href": "Courses/OPP/Classes_Exceptions.html#manipulate-file-names-across-platforms",
    "title": "Classes & Exceptions",
    "section": "Manipulate file names across platforms",
    "text": "Manipulate file names across platforms\nEach OS (Linux, Windows, Mac, etc.) might have a different syntax to describe a file path. The following would avoid naming conflict due to each OS syntax and could be important for your project if you work with colleagues having a different OS from yours.\n\nimport os\n\nprint(os.path.join('~', 'work', 'src'))\nprint(os.path.join(os.getcwd(), 'new_directory'))\nos.path.expanduser?\nprint(os.path.expanduser(os.path.join('~', 'work', 'src')))\n\n~/work/src\n/home/runner/work/Course-Software-Development-HAX712X/Course-Software-Development-HAX712X/Courses/OPP/new_directory\n/home/runner/work/src\n\n\n\n\n\n\n\n\nEXERCISE: Create a bunch of files\n\n\n\nWrite a simple script that creates, in the sub-directory scripts, the following text files: myDb_000.txt, myDb_001.txt, myDb_002.txt, …, myDb_049.txt. The i-th file should contain a single line with the average of the i first digits of pi.\nHint:\n\nYou might need zero padding.\nYou can check what the following code does.\n\nfile = open(\"copy.txt\")\nfile.write(\"Your text goes here\")\nfile.close()\n\nYou might also need some precision for the digits of \\(\\pi\\), hence using mpmath instead of numpy. The following code shows elements of help:\n\n\nfrom mpmath import mp\n\nn_tot = 10\nmp.dps = n_tot  # set number of digits\nprint(mp.pi)\n\nif not os.path.isdir(\"script\"):\n    os.mkdir(\"script\")\n\n\nfor i in range(2, n_tot + 2):\n    print(f\"{i:0{i}}\")\n\n3.141592654\n02\n003\n0004\n00005\n000006\n0000007\n00000008\n000000009\n0000000010\n00000000011",
    "crumbs": [
      "OOP",
      "Classes & Exceptions"
    ]
  },
  {
    "objectID": "Courses/OPP/Classes_Exceptions.html#references",
    "href": "Courses/OPP/Classes_Exceptions.html#references",
    "title": "Classes & Exceptions",
    "section": "References",
    "text": "References\n\nPython official web page and its style and writing recommendation\nThink Python - A free book by Allen Downey.\nPython Essential Reference - a good reference for general Python coding\nPython Data Science Handbook - an excellent book for data science in Python by Jake VanderPlas (associated notebook available online)",
    "crumbs": [
      "OOP",
      "Classes & Exceptions"
    ]
  },
  {
    "objectID": "Courses/OPP/Classes_Exceptions.html#footnotes",
    "href": "Courses/OPP/Classes_Exceptions.html#footnotes",
    "title": "Classes & Exceptions",
    "section": "Footnotes",
    "text": "Footnotes\n\n\nCamelCase (🇫🇷: casse de chameau): the name comes from the “bumpy” look of its letters as in the Wikipedia illustration below ↩︎",
    "crumbs": [
      "OOP",
      "Classes & Exceptions"
    ]
  }
]