---
title: "Sparse matrices, graphs and maps"
---

## Memory efficiency: sparse matrices

Sparse matrices are useful to handle potentially huge matrices with structures. The most standard structure is sparsity, *i.e.,* matrices that have only a few non-zero coefficients.


The most common formats are

 - `COO_matrix(arg1[, shape, dtype, copy])`:
   A sparse matrix in COOrdinate format.
 - `csr_matrix(arg1[, shape, dtype, copy])`:
   Compressed Sparse Row matrix (default format in `scipy`)
 - `csc_matrix(arg1[, shape, dtype, copy])`:
   Compressed Sparse Column matrix


Below are examples of common scenarios where sparse matrices are often used:


### Natural Language Processing (NLP)
A matrix might encode the presence/absence in a text of a word from a dictionary (say the set of French words). The number 0 (resp. 1) represents the presence (resp. absence) of a word in a text.

### One-hot encoding/Dummy variables
To handle categorical data encoding as strings, many algorithms require that you first transform such variables as numerical vectors. The simplest protocol is to create one column to represent each modality of the categorical variable
and to set the value to 1 if the observation is of that modality, and 0 otherwise. This is called **one-hot encoding** or **dummy encoding**.
By construction, this can be encoded into a sparse (binary) matrix.

An example with `pandas` and  `sklearn` is given below (recall that `0` represents `False` and `1` represents `True`):

```{python}
import os
import pandas as pd
import pooch  # download data / avoid re-downloading
from sklearn import datasets
from sklearn.preprocessing import OneHotEncoder
from sklearn.compose import make_column_transformer

url = "http://josephsalmon.eu/enseignement/datasets/titanic.csv"
path_target = "./titanic.csv"
path, fname = os.path.split(path_target)
pooch.retrieve(url, path=path, fname=fname, known_hash=None)

categorical_column = ['Embarked']
df_titanic_raw = pd.read_csv("titanic.csv", usecols=categorical_column)
print(df_titanic_raw.info())
print(df_titanic_raw.head())
```

`pandas` approach with `get_dummies`:


```{python}
dummies = pd.get_dummies(df_titanic_raw.Embarked, sparse=True)
dummies.info()
```

`sklearn` approach with `OneHotEncoder`:
```{python}
#|eval: false
transformer=make_column_transformer((OneHotEncoder(), ['Embarked']), remainder="passthrough")
matrix_embarked = transformer.fit_transform(df_titanic_raw)
print(matrix_embarked)
print(type(matrix_embarked))
```


::: {.scroll-container style="overflow-y: scroll; height: 400px;"}
```{python}
#|echo: false
transformer=make_column_transformer((OneHotEncoder(), ['Embarked']), remainder="passthrough")
matrix_embarked = transformer.fit_transform(df_titanic_raw)
print(matrix_embarked)
print(type(matrix_embarked))
```
:::

::: {.callout-note}
The differences between the two approaches are:
- the encoding of absence/presence (`True`/`False` vs. `0`/`1`)
- the output created handles missing values differently by default
:::


### Discretization of a physical system
For instance, when very distant particles/objects have little influence, their value can be set to zero when representing physical quantities (*e.g.,* heat diffusion, fluid mechanics, electro/magnetism, etc.)

### Graphs
Graphs are naturally represented by adjacency or incidence matrices (*cf.* below), and therefore beyond the graphs, maps!
We illustrate that in the last section of the course.


**References**:

- [Scipy Lectures: why sparse matrices](http://scipy-lectures.org/advanced/scipy_sparse/introduction.html#why-sparse-matrices)

- [Sparse data structures in Python](https://rushter.com/blog/scipy-sparse-matrices/), by Artem Golubin

- [Introduction to Sparse Matrices in Python with SciPy](http://cmdlinetips.com/2018/03/sparse-matrices-in-python-with-scipy), by cmdlinetips

- [Scipy doc on sparse matrices](https://docs.scipy.org/doc/scipy/reference/sparse.html#module-scipy.sparse)


### Usage in `scipy`


```{python}
from scipy import sparse
from scipy.sparse import isspmatrix

Id = sparse.eye(3)
print(Id.toarray())
print(f'Q: Is the matrix Id is sparse?\nA: {isspmatrix(Id)}')

n1 = 9
n2 = 9
mat_rnd = sparse.rand(n1, n2, density=0.25, format="csr",
                      random_state=42)
print(mat_rnd.toarray())
print(f'Q: Is the matrix mat_rnd sparse?\nA: {isspmatrix(mat_rnd)}')
```

A matrix-vector product can be performed as usual, with the `@` operators:

```{python}
import numpy as np
v = np.random.rand(n2)
mat_rnd@v
```

::: {.callout-important appearance='default' icon="false"}
## EXERCISE: Linear models & sparse matrices

Create a function that can fit ordinary least squares for sparse matrices (or not).
In particular, handle the usual pre-processing step of standardizing the columns of the design matrix (*i.e.,* centering columns and dividing by standard deviation)? Beware: often you cannot center a sparse matrix without making it non-sparse.
:::

The choice of a sparse format depends on the nature and structure of the data.
For instance:
 - `csc_matrix` is more efficient for slicing by column,
 - `csr_matrix` is more efficient for slicing by row.

## Graphs and sparsity
A classical field for the application of sparse matrices is when using
graphs: although the number of nodes can be huge, each node of a graph is
in general not connected to all nodes.
Let us represent a graph by its adjacency matrix:

### Definition: *adjacency matrix*

Suppose that $G=(V,E)$ is a graph, where $\left|V\right|=n$.
Suppose that the vertices of $G$ are arbitrarily numbered $v_1,\ldots,v_n.$
The adjacency matrix $A$ of $G$ is the matrix $n \times n$ of general term:

$$
 A_{{i,j}}=
 \left\{
     \begin{array}{rl}
 	     1, & \text{if } (v_i,v_j) \in E \\
         0, & \text{o.w.}
      \end{array}
 \right.
$$

Note that instead of 1, the value could vary on a per-edge basis (cf. @fig-graph).

For standard graph manipulation the package `networkx` is very useful.

```{python}
import networkx as nx
```

It allows one to define a graph very easily:
```{python}
G = nx.Graph()
G.add_edge('A', 'B', weight=4)
G.add_edge('A', 'C', weight=3)
G.add_edge('B', 'D', weight=2)
G.add_edge('C', 'D', weight=4)
G.add_edge('D', 'A', weight=2)
```

and then visualize it:

```{python}
#| label: fig-graph
#| fig-cap: "Plot a simple graph"

import matplotlib.pyplot as plt
my_seed = 44
nx.draw_networkx(
    G, with_labels=True,
    node_size=1000,
    pos=nx.spring_layout(G, seed=my_seed)
)

labels = nx.get_edge_attributes(G, "weight")
nx.draw_networkx_edges(
    G,
    pos=nx.spring_layout(G, seed=my_seed),
    width=[6 * i for i in list(labels.values())],
)
nx.draw_networkx_edge_labels(
    G, pos=nx.spring_layout(G, seed=my_seed),
    edge_labels=labels
)
plt.axis("off")
plt.show()

```

You can get (a variant of) the adjacency matrix using
```{python}
A = nx.adjacency_matrix(G)
print(A.todense(), f"Q: Is A spase?\nA: {isspmatrix(A)}")
```
where the adjacency matrix is stored in a sparse format, and can also encode the weights of the edges.


With `networkx`, it is simple to get the shortest path between two nodes in a graph using the `shortest_path` function:
```{python}
shortest_path = nx.shortest_path(G, 'C', 'B', weight='weight')
str_shortest_path = ' -> '.join(shortest_path)
print(f"The shortest path between C and B is:\n {str_shortest_path}")
```



### Definition : *incidence matrix*

Let $G = (V,E)$ be a (non-oriented) graph with $n$ vertices,
$V = [1,\dots,n]$, and $p$ edges, $E = [1,\dots,p]$.
The graph can be represented by its vertex-edge incidence matrix
$D^\top \in \mathbb{R}^{p \times n}$ defined by

$$
(D^\top)_{{e,v}} =
\left\{
     \begin{array}{rl}
    + 1, & \text{if } v = \min(i,j) \\
    -1, & \text{si } v = \max(i,j) \\
    0, & \text{sinon}
  \end{array}
  \right.
$$

where $e = (i,j)$.


### Definition : *Laplacian matrix*
The matrix $L=D D^\top$ is the so-called graph Laplacian of $G$

```{python}
D = nx.incidence_matrix(G, oriented=True).T
L = nx.laplacian_matrix(G)
print(isspmatrix(D))
print(D.todense(), L.todense())
```

### More graph visualizations

```{python}
g = nx.karate_club_graph()

# Return a list of tuples each tuple is (node, deg)
list_degree = list(g.degree())
# Build a node list and corresponding degree list
nodes, degree = map(list, zip(*list_degree))

fig, ax = plt.subplots(1, 1, figsize=(8, 6))
nx.draw(
    g,
    ax=ax,
    nodelist=nodes,
    node_size=[(v * 30) + 1 for v in degree],
    width=4,
    alpha=0.7,
    edgecolors="white",
    node_color="#1f78b4",
    edge_color="#1f78b4",
)
plt.axis("off")
plt.show()

```

### Back to sparse matrices

```{python}

A = nx.adjacency_matrix(g).T
print(A.todense())

fig, ax = plt.subplots()
ax = plt.spy(A)
print(f"Pourcentage of active edges: {(g.number_of_edges() / g.number_of_nodes()**2) * 100:.2f} %")
```

[Remark]{.Punderline}: a possible visualization with Javascript (not so stable though, can be skipped)

- [Interactive Networks with `networkx` and `d3`](https://andrewmellor.co.uk/blog/articles/2014/12/14/d3-networks/)
- [`ner2sna`: Entity Extraction and Network Analysis](https://github.com/brandomr/ner2sna)

### Planar graphs and maps

Open Street Map can interface with `networkx` using the `osmnx` package.


#### The `osmnx` package
**Known bug for old versions**:
- [Cannot import name 'CRS' from 'pyproj' in osmnx](https://stackoverflow.com/questions/59658167/cannot-import-name-crs-from-pyproj-for-using-the-osmnx-library)

- [TypeError: argument of type 'CRS' is not iterable" with osmnx](https://stackoverflow.com/questions/60312055/python-getting-typeerror-argument-of-type-crs-is-not-iterable-with-osmnx)

So pick version 0.14 at least
```conda install osmnx>=0.14```
or
```pip install osmnx>=0.10```.


For **Windows users**, there might be some trouble with installing the
`fiona` package, see:

- [Installing `geopandas`:" A GDAL API version must be specified (anaconda)](https://stackoverflow.com/questions/54734667/error-installing-geopandas-a-gdal-api-version-must-be-specified-in-anaconda)

- [Install `fiona` on Windows](https://jingwen-z.github.io/how-to-install-python-module-fiona-on-windows-os)

Special case for `osmnx` on **Windows** follow the next step in order:

* `pip install osmnx`
* `pip install Rtree`
* `conda install -c conda-forge libspatialindex=1.9.3`
* `pip install osmnx`
* Install all packages required up to `fiona`.
* `conda install -c conda-forge geopandas`
* Say yes to everything
* Once done,  launch `pip install osmnx==1.0.1`

```{python}
import osmnx as ox
ox.settings.use_cache=True
ox.__version__
```

```{python}
G = ox.graph_from_place('Montpellier, France', network_type='bike')
print(f"nb edges: {G.number_of_edges()}")
print(f"nb nodes: {G.number_of_nodes()}")
```

```{python}
fig, ax = ox.plot_graph(G)
```

You also need to install the package `folium` for the visualization of the maps.
```{python}
import folium
```

```{python}
map_osm = folium.Map(location=[43.610769, 3.876716])
```

```{python}
map_osm.add_child(folium.RegularPolygonMarker(location=[43.610769, 3.876716],
                  fill_color='#132b5e', radius=5))
map_osm
```


```{python}
D = nx.incidence_matrix(G, oriented=True).T
```

```{python}
element = np.zeros(1, dtype=float)
mem = np.prod(D.shape) * element.data.nbytes / (1024**2)
print('Size of full matrix with zeros: {0:3.2f}  MB'.format(mem))

print('Size of sparse matrix: {0:3.2f}  MB'.format(D.data.nbytes/(1024**2) ))

print('Ratio  of full matrix size / sparse: {0:3.2f}%'.format(100 * D.data.nbytes / (1024**2 * mem)))
print(isspmatrix(D))
```

**Alternatively**: you can uncomment the following line,
and check that the size of a similar matrix (with a non-sparse
format) would be huge,

```>>> Size of a full matrix encoding the zeros: 4 gB```

Create a matrix of similar size. BEWARE: This creates a huge matrix:

```{python}
M = np.random.randn(G.number_of_nodes(), G.number_of_nodes())
print('Size of a full encoding the zeros: {0:3.2f}  MB'.format(M.nbytes/(1024**2)))
```


Now you can check the memory usage of the sparse matrix representation associated:


```{python}
print(" {0:.2} % of edges only are needed to represent the graph of Montpellier".format(100 * G.number_of_edges() / G.number_of_nodes() ** 2))
```

Hopefully, this is convincing enough to use sparse matrices when dealing with graphs and maps!


#### Visualize the shortest path between two points
**References**:

- [OpenStreetMap Roads Data Using osmnx](https://blog.ouseful.info/2018/06/29/working-with-openstreetmap-roads-data-using-osmnx/)

```{python}
origin = ox.geocoder.geocode('Place Eugène Bataillon, Montpellier, France')
destination = ox.geocoder.geocode('Maison du Lez, Montpellier, France')

origin_node = ox.nearest_nodes(G, origin[1], origin[0])
destination_node = ox.nearest_nodes(G, destination[1], destination[0])

print(origin)
print(destination)
route = ox.routing.shortest_path(G, origin_node, destination_node)
route_back = ox.routing.shortest_path(G, destination_node, origin_node)
```


```{python}
fig, ax = ox.plot_graph_routes(G, [route, route_back], route_linewidth=6, route_colors=['red', 'blue'], node_size=0)
```
Visualize the same routes, but on a map:

```{python}

'''
route_edges = ox.utils_graph.route_to_gdf(G, route)
route_back_edges = ox.utils_graph.route_to_gdf(G, route_back)

m = route_edges.explore(color="red", style_kwds={"weight": 5, "opacity": 0.75})
m = route_back_edges.explore(m=m, color="blue", style_kwds={"weight": 5, "opacity": 0.75})
m
'''
```


::: {.callout-note}
Note that even if we call `G` a graph it is rather a multigraph (there might be several edges between two nodes):
```{python}
G.is_multigraph()
```
:::



**References**:

- [OSMnx: Python for Street Networks](https://geoffboeing.com/2016/11/osmnx-python-street-networks/)
- [Network analysis in Python](https://automating-gis-processes.github.io/2017/lessons/L7/network-analysis.html)
- [https://autogis-site.readthedocs.io/en/latest/index.html](https://autogis-site.readthedocs.io/en/latest/index.html)
