---
title: "2023-2024"
number-sections: true
---

# Project: a weather forecast app

For this course, the grading consists in creating a Weather Forecast App for Montpellier.

## Setting and objective

 The main objective of this project is to create:

- a GitHub repository containing all the code and documentation of your project
- a GitHub web page displaying images representing the **weather forecast for the 4 next days (in Montpellier)** that automatically updates. The website URL should be accessible in the README.md at the root of your Git repository.
- a short description of the methodology used, below the forecast itself.


## Guidelines

- For this project, you need to create a **GitHub repository** with your code, and we suggest using GitHub action for the deployment phase (weather forecast update and website generation).

- The data to be used for your project is to be obtained from [**open-meteo.com**](https://open-meteo.com/en/docs/meteofrance-api).

- You have to create a simple webpage using a GitHub page and a GitHub action with `Quarto` for instance; see [https://quarto.org/docs/publishing/github-pages.html](https://quarto.org/docs/publishing/github-pages.html) for details, and also the associated `yml` [here](https://github.com/josephsalmon/Tweets/blob/master/.github/workflows/publish.yml). The webpage created will display the weather forecast in Montpellier for the next 4 days. For instance, it could display something like this:

![Weather Forecast (source: [meteoblue.com](https://www.meteoblue.com/))](meteo.png){width=500}

::: {.callout-note}
You should display the forecast together with the highest/lowest temperature for the day, wind average, and amount of precipitation. The closer you can reproduce something in the spirit of the previous illustration, the higher the grade.
:::


- An additional constraint is that the app should be **autonomous once created**, and should be automatically refreshed every day (like a real weather forecast website!).
An example to help you in this task is available [here](https://josephsalmon.github.io/Tweets/economics/index.html) (and the [associated source code](https://github.com/josephsalmon/Tweets/blob/master/economics/index.qmd)), updating time series on a monthly basis. For the automatic update and scheduling, see the [schedule](https://docs.github.com/en/actions/using-workflows/events-that-trigger-workflows#schedule) event description.

- The only image format accepted is SVG. See examples from [freesvg.org](https://freesvg.org/),
[creativecommons](https://search.creativecommons.org/),
[clker](http://www.clker.com/),
[openclipart](https://openclipart.org/), etc.

- The code must be structured, commented and properly formatted with the `black` linter and follow `pep8` convention. Guidance on this can be obtained here [https://www.freecodecamp.org/news/auto-format-your-python-code-with-black/](https://www.freecodecamp.org/news/auto-format-your-python-code-with-black/) or [here](https://code.visualstudio.com/docs/python/formatting) for VSCode.
